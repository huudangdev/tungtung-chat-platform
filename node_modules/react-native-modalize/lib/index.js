"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_native_1 = require("react-native");
const react_native_gesture_handler_1 = require("react-native-gesture-handler");
const utils_1 = require("./utils");
const styles_1 = require("./styles");
const { StatusBarManager } = react_native_1.NativeModules;
const { height: screenHeight } = react_native_1.Dimensions.get('window');
const AnimatedKeyboardAvoidingView = react_native_1.Animated.createAnimatedComponent(react_native_1.KeyboardAvoidingView);
const AnimatedFlatList = react_native_1.Animated.createAnimatedComponent(react_native_1.FlatList);
const AnimatedSectionList = react_native_1.Animated.createAnimatedComponent(react_native_1.SectionList);
const THRESHOLD = 150;
class Modalize extends React.Component {
    constructor(props) {
        super(props);
        this.snaps = [];
        this.beginScrollYValue = 0;
        this.contentAlreadyCalculated = false;
        this.beginScrollY = new react_native_1.Animated.Value(0);
        this.dragY = new react_native_1.Animated.Value(0);
        this.translateY = new react_native_1.Animated.Value(screenHeight);
        this.modal = React.createRef();
        this.modalChildren = React.createRef();
        this.modalContentView = React.createRef();
        this.contentView = React.createRef();
        this.modalOverlay = React.createRef();
        this.modalOverlayTap = React.createRef();
        this.willCloseModalize = false;
        this.open = () => {
            const { adjustToContentHeight, onOpen } = this.props;
            if (onOpen) {
                onOpen();
            }
            if (!adjustToContentHeight || this.contentAlreadyCalculated) {
                this.onAnimateOpen();
            }
            else {
                this.setState({ isVisible: true });
            }
        };
        this.close = (dest = 'default') => {
            const { onClose } = this.props;
            if (onClose) {
                onClose();
            }
            this.onAnimateClose(dest);
        };
        this.scrollTo = (...args) => {
            if (this.contentView.current) {
                this.contentView.current.getNode().scrollTo(...args);
            }
        };
        this.onAnimateOpen = (alwaysOpen) => {
            const { onOpened, snapPoint, useNativeDriver, openAnimationConfig } = this.props;
            const { timing, spring } = openAnimationConfig;
            const { overlay, modalHeight } = this.state;
            const toValue = alwaysOpen ? modalHeight - alwaysOpen : snapPoint ? modalHeight - snapPoint : 0;
            react_native_1.BackHandler.addEventListener('hardwareBackPress', this.onBackPress);
            this.setState({
                isVisible: true,
                showContent: true,
            });
            react_native_1.Animated.parallel([
                react_native_1.Animated.timing(overlay, {
                    toValue: alwaysOpen ? 0 : 1,
                    duration: timing.duration,
                    easing: react_native_1.Easing.ease,
                    useNativeDriver,
                }),
                spring
                    ? react_native_1.Animated.spring(this.translateY, Object.assign(Object.assign({}, utils_1.getSpringConfig(spring)), { toValue,
                        useNativeDriver }))
                    : react_native_1.Animated.timing(this.translateY, {
                        toValue,
                        duration: timing.duration,
                        easing: timing.easing,
                        useNativeDriver,
                    }),
            ]).start(() => {
                if (onOpened) {
                    onOpened();
                }
            });
        };
        this.onAnimateClose = (dest = 'default') => {
            const { onClosed, useNativeDriver, snapPoint, closeAnimationConfig, alwaysOpen } = this.props;
            const { timing, spring } = closeAnimationConfig;
            const { overlay, modalHeight } = this.state;
            const lastSnap = snapPoint ? this.snaps[1] : 80;
            const toInitialAlwaysOpen = dest === 'alwaysOpen' && Boolean(alwaysOpen);
            const toValue = toInitialAlwaysOpen ? modalHeight - alwaysOpen : screenHeight;
            react_native_1.BackHandler.removeEventListener('hardwareBackPress', this.onBackPress);
            this.beginScrollYValue = 0;
            this.beginScrollY.setValue(0);
            react_native_1.Animated.parallel([
                react_native_1.Animated.timing(overlay, {
                    toValue: 0,
                    duration: timing.duration,
                    easing: react_native_1.Easing.ease,
                    useNativeDriver,
                }),
                spring
                    ? react_native_1.Animated.spring(this.translateY, Object.assign(Object.assign({}, utils_1.getSpringConfig(spring)), { toValue,
                        useNativeDriver }))
                    : react_native_1.Animated.timing(this.translateY, {
                        duration: timing.duration,
                        easing: react_native_1.Easing.out(react_native_1.Easing.ease),
                        toValue,
                        useNativeDriver,
                    }),
            ]).start(() => {
                if (onClosed) {
                    onClosed();
                }
                this.setState({ showContent: toInitialAlwaysOpen });
                this.translateY.setValue(toValue);
                this.dragY.setValue(0);
                this.willCloseModalize = false;
                this.setState({
                    lastSnap,
                    isVisible: toInitialAlwaysOpen,
                });
            });
        };
        this.onContentViewLayout = ({ nativeEvent }) => {
            const { adjustToContentHeight, snapPoint, alwaysOpen } = this.props;
            const { contentHeight, modalHeight } = this.state;
            if (!adjustToContentHeight ||
                modalHeight <= nativeEvent.layout.height ||
                snapPoint ||
                this.contentAlreadyCalculated) {
                if (modalHeight <= nativeEvent.layout.height) {
                    this.onAnimateOpen(alwaysOpen);
                }
                return;
            }
            // @todo: modalHeight should be equal to the nativeEvent's height,
            // and not to the state's value which is 0 at the first mount
            this.setState({
                contentHeight: nativeEvent.layout.height,
                modalHeight: contentHeight - this.handleHeight,
            }, () => {
                this.contentAlreadyCalculated = true;
                this.onAnimateOpen();
            });
        };
        this.onContentViewChange = (keyboardHeight) => {
            const { adjustToContentHeight } = this.props;
            const { contentHeight, modalHeight, headerHeight, footerHeight } = this.state;
            const contentViewHeight = [];
            if (keyboardHeight) {
                const statusBarHeight = utils_1.isIphoneX ? 48 : utils_1.isIos ? 20 : StatusBarManager.HEIGHT;
                const height = screenHeight -
                    keyboardHeight -
                    headerHeight -
                    footerHeight -
                    this.handleHeight -
                    statusBarHeight;
                if (contentHeight > height) {
                    contentViewHeight.push({ height });
                    this.setState({ keyboardEnableScroll: true });
                }
            }
            else if (!adjustToContentHeight) {
                const height = modalHeight - headerHeight - footerHeight;
                contentViewHeight.push({ height });
                this.setState({ keyboardEnableScroll: false });
            }
            this.setState({ contentViewHeight });
        };
        this.onHandleComponent = ({ nativeEvent }) => {
            if (nativeEvent.oldState === react_native_gesture_handler_1.State.BEGAN) {
                this.beginScrollY.setValue(0);
            }
            this.onHandleChildren({ nativeEvent });
        };
        this.onHandleChildren = ({ nativeEvent }) => {
            const { snapPoint, useNativeDriver, adjustToContentHeight, alwaysOpen, closeAnimationConfig, } = this.props;
            const { timing } = closeAnimationConfig;
            const { lastSnap, contentHeight, modalHeight, overlay } = this.state;
            const { velocityY, translationY } = nativeEvent;
            this.setState({ enableBounces: this.beginScrollYValue > 0 || translationY < 0 });
            if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE) {
                const toValue = translationY - this.beginScrollYValue;
                let destSnapPoint = 0;
                if (snapPoint || alwaysOpen) {
                    const dragToss = 0.05;
                    const endOffsetY = lastSnap + toValue + dragToss * velocityY;
                    this.snaps.forEach((snap) => {
                        const distFromSnap = Math.abs(snap - endOffsetY);
                        if (distFromSnap < Math.abs(destSnapPoint - endOffsetY)) {
                            destSnapPoint = snap;
                            this.willCloseModalize = false;
                            if (alwaysOpen) {
                                destSnapPoint = modalHeight - alwaysOpen;
                            }
                            if (snap === this.snapEnd && !alwaysOpen) {
                                this.willCloseModalize = true;
                                this.close();
                            }
                        }
                    });
                }
                else if (translationY > (adjustToContentHeight ? contentHeight / 3 : THRESHOLD) &&
                    this.beginScrollYValue === 0 &&
                    !alwaysOpen) {
                    this.willCloseModalize = true;
                    this.close();
                }
                if (this.willCloseModalize) {
                    return;
                }
                this.setState({ lastSnap: destSnapPoint });
                this.translateY.extractOffset();
                this.translateY.setValue(toValue);
                this.translateY.flattenOffset();
                this.dragY.setValue(0);
                if (alwaysOpen) {
                    react_native_1.Animated.timing(overlay, {
                        toValue: Number(destSnapPoint <= 0),
                        duration: timing.duration,
                        easing: react_native_1.Easing.ease,
                        useNativeDriver,
                    }).start();
                }
                react_native_1.Animated.spring(this.translateY, {
                    tension: 50,
                    friction: 12,
                    velocity: velocityY,
                    toValue: destSnapPoint,
                    useNativeDriver,
                }).start();
            }
        };
        this.onHandleOverlay = ({ nativeEvent }) => {
            if (nativeEvent.oldState === react_native_gesture_handler_1.State.ACTIVE && !this.willCloseModalize) {
                this.close();
            }
        };
        this.onBackPress = () => __awaiter(this, void 0, void 0, function* () {
            const { onBackButtonPress, alwaysOpen } = this.props;
            if (alwaysOpen) {
                return false;
            }
            if (onBackButtonPress) {
                onBackButtonPress();
            }
            else {
                this.close();
            }
            return true;
        });
        this.onKeyboardShow = (event) => {
            const { height } = event.endCoordinates;
            this.setState({ keyboardToggle: true });
            this.onContentViewChange(height);
        };
        this.onKeyboardHide = () => {
            this.setState({ keyboardToggle: false });
            this.onContentViewChange();
        };
        this.renderComponent = (Tag, name) => {
            // @ts-ignore
            const element = React.isValidElement(Tag) ? Tag : React.createElement(Tag, null);
            // We don't need to calculate header and footer if they are absolutely positioned
            if (Tag && utils_1.hasAbsoluteStyle(Tag)) {
                return element;
            }
            const onLayout = ({ nativeEvent }) => this.setState({ [`${name}Height`]: nativeEvent.layout.height }, this.onContentViewChange);
            return (React.createElement(react_native_1.View, { style: styles_1.default.component, onLayout: onLayout, pointerEvents: "box-none" }, element));
        };
        this.renderHandle = () => {
            const { handleStyle, useNativeDriver, withHandle } = this.props;
            const handleStyles = [styles_1.default.handle];
            const shapeStyles = [styles_1.default.handle__shape, handleStyle];
            if (!withHandle) {
                return null;
            }
            if (!this.isHandleOutside) {
                handleStyles.push(styles_1.default.handleBottom);
                shapeStyles.push(styles_1.default.handle__shapeBottom, handleStyle);
            }
            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { simultaneousHandlers: this.modal, shouldCancelWhenOutside: false, onGestureEvent: react_native_1.Animated.event([{ nativeEvent: { translationY: this.dragY } }], {
                    useNativeDriver,
                }), onHandlerStateChange: this.onHandleComponent },
                React.createElement(react_native_1.Animated.View, { style: handleStyles },
                    React.createElement(react_native_1.View, { style: shapeStyles }))));
        };
        this.renderHeader = () => {
            const { useNativeDriver, HeaderComponent } = this.props;
            if (!HeaderComponent) {
                return null;
            }
            if (utils_1.hasAbsoluteStyle(HeaderComponent)) {
                return this.renderComponent(HeaderComponent, 'header');
            }
            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { simultaneousHandlers: this.modal, shouldCancelWhenOutside: false, onGestureEvent: react_native_1.Animated.event([{ nativeEvent: { translationY: this.dragY } }], {
                    useNativeDriver,
                }), onHandlerStateChange: this.onHandleComponent },
                React.createElement(react_native_1.Animated.View, { style: styles_1.default.component, pointerEvents: "box-none" }, this.renderComponent(HeaderComponent, 'header'))));
        };
        this.renderContent = () => {
            const { children, scrollViewProps, flatListProps, sectionListProps } = this.props;
            const { contentHeight, enableBounces, contentViewHeight, keyboardEnableScroll } = this.state;
            const scrollEnabled = contentHeight === 0 || keyboardEnableScroll;
            const keyboardDismissMode = utils_1.isIos ? 'interactive' : 'on-drag';
            const opts = {
                ref: this.contentView,
                style: contentViewHeight,
                bounces: enableBounces,
                onScrollBeginDrag: react_native_1.Animated.event([{ nativeEvent: { contentOffset: { y: this.beginScrollY } } }], { useNativeDriver: false }),
                scrollEventThrottle: 16,
                onLayout: this.onContentViewLayout,
                scrollEnabled,
            };
            if (flatListProps) {
                return React.createElement(AnimatedFlatList, Object.assign({}, opts, flatListProps));
            }
            if (sectionListProps) {
                return React.createElement(AnimatedSectionList, Object.assign({}, opts, sectionListProps));
            }
            return (React.createElement(react_native_1.Animated.ScrollView, Object.assign({}, opts, scrollViewProps, { keyboardDismissMode: keyboardDismissMode }), children));
        };
        this.renderChildren = () => {
            const { useNativeDriver, adjustToContentHeight, keyboardAvoidingBehavior } = this.props;
            const { keyboardToggle } = this.state;
            const marginBottom = adjustToContentHeight ? 0 : keyboardToggle ? this.handleHeight : 0;
            const enabled = utils_1.isIos && !adjustToContentHeight;
            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: this.modalChildren, simultaneousHandlers: [this.modalContentView, this.modal], shouldCancelWhenOutside: false, onGestureEvent: react_native_1.Animated.event([{ nativeEvent: { translationY: this.dragY } }], {
                    useNativeDriver,
                }), onHandlerStateChange: this.onHandleChildren },
                React.createElement(AnimatedKeyboardAvoidingView, { behavior: keyboardAvoidingBehavior || 'position', style: { marginBottom }, enabled: enabled },
                    React.createElement(react_native_gesture_handler_1.NativeViewGestureHandler, { ref: this.modalContentView, waitFor: this.modal, simultaneousHandlers: this.modalChildren }, this.renderContent()))));
        };
        this.renderFooter = () => {
            const { FooterComponent } = this.props;
            if (!FooterComponent) {
                return null;
            }
            return this.renderComponent(FooterComponent, 'footer');
        };
        this.renderOverlay = () => {
            const { useNativeDriver, overlayStyle, alwaysOpen } = this.props;
            const { showContent } = this.state;
            const pointerEvents = alwaysOpen ? 'box-none' : 'auto';
            return (React.createElement(react_native_gesture_handler_1.PanGestureHandler, { ref: this.modalOverlay, simultaneousHandlers: [this.modal], shouldCancelWhenOutside: false, onGestureEvent: react_native_1.Animated.event([{ nativeEvent: { translationY: this.dragY } }], {
                    useNativeDriver,
                }), onHandlerStateChange: this.onHandleChildren },
                React.createElement(react_native_1.Animated.View, { style: styles_1.default.overlay, pointerEvents: pointerEvents }, showContent && (React.createElement(react_native_gesture_handler_1.TapGestureHandler, { ref: this.modalOverlayTap, onHandlerStateChange: this.onHandleOverlay },
                    React.createElement(react_native_1.Animated.View, { style: [styles_1.default.overlay__background, overlayStyle, this.overlayBackground], pointerEvents: pointerEvents }))))));
        };
        this.renderModalize = () => {
            const { modalStyle, adjustToContentHeight, keyboardAvoidingBehavior, alwaysOpen } = this.props;
            const { isVisible, lastSnap, showContent } = this.state;
            const enabled = utils_1.isIos && adjustToContentHeight;
            const pointerEvents = alwaysOpen ? 'box-none' : 'auto';
            if (!isVisible) {
                return null;
            }
            return (React.createElement(react_native_1.View, { style: styles_1.default.modalize, pointerEvents: pointerEvents },
                React.createElement(react_native_gesture_handler_1.TapGestureHandler, { ref: this.modal, maxDurationMs: 100000, maxDeltaY: lastSnap },
                    React.createElement(react_native_1.View, { style: styles_1.default.modalize__wrapper, pointerEvents: "box-none" },
                        showContent && (React.createElement(AnimatedKeyboardAvoidingView, { style: [styles_1.default.modalize__content, this.modalizeContent, modalStyle], behavior: keyboardAvoidingBehavior || 'padding', enabled: enabled },
                            this.renderHandle(),
                            this.renderHeader(),
                            this.renderChildren(),
                            this.renderFooter())),
                        this.renderOverlay()))));
        };
        this.renderReactModal = (child) => {
            const { useNativeDriver } = this.props;
            const { isVisible } = this.state;
            return (React.createElement(react_native_1.Modal, { supportedOrientations: ['landscape', 'portrait', 'portrait-upside-down'], onRequestClose: this.onBackPress, hardwareAccelerated: useNativeDriver, visible: isVisible, transparent: true }, child));
        };
        const fullHeight = utils_1.isIos ? screenHeight : screenHeight - 10;
        const computedHeight = fullHeight - this.handleHeight - (utils_1.isIphoneX ? 34 : 0);
        const modalHeight = props.modalHeight || computedHeight;
        if (props.withReactModal) {
            console.warn(`[react-native-modalize] 'withReactModal' is set to 'true'. Modal from react-native is going to be moved out of the core in the future. I\'d recommend migrating to something like react-navigation or react-native-navigation\'s to wrap Modalize. Check out the documentation for more informations.`);
        }
        if (props.modalHeight && props.adjustToContentHeight) {
            console.error(`[react-native-modalize] You cannot use both 'modalHeight' and 'adjustToContentHeight' props at the same time. Only choose one of the two.`);
        }
        if ((props.scrollViewProps || props.children) && props.flatListProps) {
            console.error(`[react-native-modalize] 'flatListProps' You can\'t use the ScrollView and the FlatList at the 'same time. As soon as you use 'flatListProps' it will replaces the default ScrollView with 'a FlatList component. Remove the 'children' and/or 'scrollViewProps' to fix the error.`);
        }
        if ((props.scrollViewProps || props.children) && props.sectionListProps) {
            console.error(`[react-native-modalize] 'sectionListProps' You can\'t use the ScrollView and the SectionList at the 'same time. As soon as you use 'sectionListProps' it will replaces the default ScrollView with 'a SectionList component. Remove the 'children' and/or 'scrollViewProps' to fix the error.`);
        }
        if (props.snapPoint) {
            this.snaps.push(0, modalHeight - props.snapPoint, modalHeight);
        }
        else {
            this.snaps.push(0, modalHeight);
        }
        this.snapEnd = this.snaps[this.snaps.length - 1];
        this.state = {
            lastSnap: props.snapPoint ? modalHeight - props.snapPoint : 0,
            isVisible: false,
            showContent: true,
            overlay: new react_native_1.Animated.Value(0),
            modalHeight,
            contentHeight: 0,
            headerHeight: 0,
            footerHeight: 0,
            enableBounces: true,
            contentViewHeight: [],
            keyboardEnableScroll: false,
            keyboardToggle: false,
        };
        this.beginScrollY.addListener(({ value }) => (this.beginScrollYValue = value));
        this.reverseBeginScrollY = react_native_1.Animated.multiply(new react_native_1.Animated.Value(-1), this.beginScrollY);
    }
    componentDidMount() {
        this.onContentViewChange();
        if (this.props.alwaysOpen) {
            this.onAnimateOpen(this.props.alwaysOpen);
        }
        react_native_1.Keyboard.addListener('keyboardWillShow', this.onKeyboardShow);
        react_native_1.Keyboard.addListener('keyboardWillHide', this.onKeyboardHide);
    }
    componentWillUnmount() {
        react_native_1.Keyboard.removeListener('keyboardWillShow', this.onKeyboardShow);
        react_native_1.Keyboard.removeListener('keyboardWillHide', this.onKeyboardHide);
    }
    get isHandleOutside() {
        const { handlePosition } = this.props;
        return handlePosition === 'outside';
    }
    get handleHeight() {
        const { withHandle } = this.props;
        if (!withHandle) {
            return 20;
        }
        return this.isHandleOutside ? 35 : 20;
    }
    get modalizeContent() {
        const { modalHeight } = this.state;
        const valueY = react_native_1.Animated.add(this.dragY, this.reverseBeginScrollY);
        return {
            height: modalHeight,
            transform: [
                {
                    translateY: react_native_1.Animated.add(this.translateY, valueY).interpolate({
                        inputRange: [-40, 0, this.snapEnd],
                        outputRange: [0, 0, this.snapEnd],
                        extrapolate: 'clamp',
                    }),
                },
            ],
        };
    }
    get overlayBackground() {
        const { overlay } = this.state;
        return {
            opacity: overlay.interpolate({
                inputRange: [0, 1],
                outputRange: [0, 1],
            }),
        };
    }
    render() {
        const { withReactModal } = this.props;
        if (withReactModal) {
            return this.renderReactModal(this.renderModalize());
        }
        return this.renderModalize();
    }
}
exports.Modalize = Modalize;
Modalize.defaultProps = {
    handlePosition: 'outside',
    useNativeDriver: true,
    adjustToContentHeight: false,
    withReactModal: false,
    withHandle: true,
    openAnimationConfig: {
        timing: { duration: 280, easing: react_native_1.Easing.ease },
        spring: { speed: 14, bounciness: 4 },
    },
    closeAnimationConfig: {
        timing: { duration: 280, easing: react_native_1.Easing.ease },
    },
};
