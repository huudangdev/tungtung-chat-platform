"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("./path");
var PackageDetails_1 = require("./PackageDetails");
var detectPackageManager_1 = require("./detectPackageManager");
var fs_extra_1 = require("fs-extra");
var lockfile_1 = require("@yarnpkg/lockfile");
var find_yarn_workspace_root_1 = __importDefault(require("find-yarn-workspace-root"));
function getPackageResolution(_a) {
    var packageDetails = _a.packageDetails, packageManager = _a.packageManager, appPath = _a.appPath;
    if (packageManager === "yarn") {
        var lockFilePath = "yarn.lock";
        if (!fs_extra_1.existsSync(lockFilePath)) {
            var workspaceRoot = find_yarn_workspace_root_1.default();
            if (!workspaceRoot) {
                throw new Error("Can't find yarn.lock file");
            }
            lockFilePath = path_1.join(workspaceRoot, "yarn.lock");
        }
        if (!fs_extra_1.existsSync(lockFilePath)) {
            throw new Error("Can't find yarn.lock file");
        }
        var appLockFile = lockfile_1.parse(fs_extra_1.readFileSync(lockFilePath).toString());
        if (appLockFile.type !== "success") {
            throw new Error("Can't parse lock file");
        }
        var installedVersion_1 = require(path_1.join(path_1.resolve(appPath, packageDetails.path), "package.json")).version;
        var entries = Object.entries(appLockFile.object).filter(function (_a) {
            var k = _a[0], v = _a[1];
            return k.startsWith(packageDetails.name + "@") &&
                v.version === installedVersion_1;
        });
        var resolutions = entries.map(function (_a) {
            var _ = _a[0], v = _a[1];
            return v.resolved;
        });
        if (resolutions.length === 0) {
            throw new Error("Can't find lockfile entry for " + packageDetails.pathSpecifier);
        }
        if (new Set(resolutions).size !== 1) {
            console.warn("Ambigious lockfile entries for " + packageDetails.pathSpecifier + ". Using version " + installedVersion_1);
            return installedVersion_1;
        }
        if (resolutions[0]) {
            return resolutions[0];
        }
        var resolution = entries[0][0].slice(packageDetails.name.length + 1);
        // resolve relative file path
        if (resolution.startsWith("file:.")) {
            return "file:" + path_1.resolve(appPath, resolution.slice("file:".length));
        }
        return resolution;
    }
    else {
        var lockfile = require(path_1.join(appPath, packageManager === "npm-shrinkwrap"
            ? "npm-shrinkwrap.json"
            : "package-lock.json"));
        var lockFileStack = [lockfile];
        for (var _i = 0, _b = packageDetails.packageNames.slice(0, -1); _i < _b.length; _i++) {
            var name = _b[_i];
            var child = lockFileStack[0].dependencies;
            if (child && name in child) {
                lockFileStack.push(child[name]);
            }
        }
        lockFileStack.reverse();
        var relevantStackEntry = lockFileStack.find(function (entry) { return entry.dependencies && packageDetails.name in entry.dependencies; });
        return (relevantStackEntry.dependencies[packageDetails.name].resolved ||
            relevantStackEntry.dependencies[packageDetails.name].from);
    }
}
exports.getPackageResolution = getPackageResolution;
if (require.main === module) {
    var packageDetails = PackageDetails_1.getPatchDetailsFromCliString(process.argv[2]);
    if (!packageDetails) {
        console.error("Can't find package " + process.argv[2]);
        process.exit(1);
        throw new Error();
    }
    console.log(getPackageResolution({
        appPath: process.cwd(),
        packageDetails: packageDetails,
        packageManager: detectPackageManager_1.detectPackageManager(process.cwd(), null),
    }));
}
//# sourceMappingURL=data:application/json;base64,