{"version":3,"sources":["NativeAppearance.web.tsx"],"names":["React","View","SyntheticPlatformEmitter","query","window","matchMedia","isMediaQueryList","addListener","removeListener","matches","colorScheme","emit","NativeAppearance","name","initialPreferences","NativeAppearanceProvider","props","flex"],"mappings":"sJAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,IAAT,KAAqB,cAArB,CAIA,MAAOC,CAAAA,wBAAP,KAAqC,gCAArC,CAEA,GAAMC,CAAAA,KAAK,CAAGC,MAAM,CAACC,UAAP,CAAoBD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,CAApB,CAAwE,IAAtF,CAEA,QAASC,CAAAA,gBAAT,CAA0BH,KAA1B,CAA+D,CAC7D,MAAOA,CAAAA,KAAK,EAAIA,KAAK,CAACI,WAAf,EAA8BJ,KAAK,CAACK,cAApC,EAAsD,MAAOL,CAAAA,KAAK,CAACM,OAAb,GAAyB,SAAtF,CACD,CAED,GAAIC,CAAAA,WAA4B,CAAG,eAAnC,CAEA,GAAIJ,gBAAgB,CAACH,KAAD,CAApB,CAA6B,CAC3BO,WAAW,CAAGP,KAAK,CAACM,OAAN,CAAgB,MAAhB,CAAyB,OAAvC,CACAN,KAAK,CAACI,WAAN,CAAkB,cAAsB,IAAXE,CAAAA,OAAW,MAAXA,OAAW,CACtC,GAAMC,CAAAA,WAAW,CAAGD,OAAO,CAAG,MAAH,CAAY,OAAvC,CACAP,wBAAwB,CAACS,IAAzB,CAA8B,mBAA9B,CAAmD,CACjDD,WAAW,CAAXA,WADiD,CAAnD,EAGD,CALD,EAMD,CAED,MAAO,IAAME,CAAAA,gBAAgB,CAAG,CAC9B,GAAIC,CAAAA,IAAJ,EAAmB,CACjB,MAAO,kBAAP,CACD,CAH6B,CAI9B,GAAIC,CAAAA,kBAAJ,EAAgD,CAC9C,MAAO,CAAEJ,WAAW,CAAXA,WAAF,CAAP,CACD,CAN6B,CAAzB,CASP,MAAO,IAAMK,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,CAACC,KAAD,QAAgB,qBAAC,IAAD,WAAM,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAb,EAA8BD,KAA9B,mDAAhB,EAAjC","sourcesContent":["import * as React from 'react';\nimport { View } from 'react-native';\nimport { ColorSchemeName, AppearancePreferences } from './Appearance.types';\n\n// @ts-ignore\nimport SyntheticPlatformEmitter from './web/SyntheticPlatformEmitter';\n\nconst query = window.matchMedia ? window.matchMedia('(prefers-color-scheme: dark)') : null;\n\nfunction isMediaQueryList(query: any): query is MediaQueryList {\n  return query && query.addListener && query.removeListener && typeof query.matches === 'boolean';\n}\n\nlet colorScheme: ColorSchemeName = 'no-preference';\n\nif (isMediaQueryList(query)) {\n  colorScheme = query.matches ? 'dark' : 'light';\n  query.addListener(function({ matches }) {\n    const colorScheme = matches ? 'dark' : 'light';\n    SyntheticPlatformEmitter.emit('appearanceChanged', {\n      colorScheme,\n    });\n  });\n}\n\nexport const NativeAppearance = {\n  get name(): string {\n    return 'NativeAppearance';\n  },\n  get initialPreferences(): AppearancePreferences {\n    return { colorScheme };\n  },\n};\n\nexport const NativeAppearanceProvider = (props: any) => <View style={{ flex: 1 }} {...props} />;\n"]}