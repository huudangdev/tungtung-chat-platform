// Generated by CoffeeScript 1.9.3
(function() {
  var EXPRESS_BUNYAN_LOGGER_FIELDS, applyColors, bunyan, colors, endsWith, lpad, path, toShortFilename;

  path = require('path');

  bunyan = require('bunyan');

  colors = require('colors/safe');

  endsWith = function(str, suffix) {
    return str.slice(-suffix.length) === suffix;
  };

  exports.lpad = lpad = function(str, count, fill) {
    if (fill == null) {
      fill = ' ';
    }
    str = "" + str;
    while (str.length < count) {
      str = fill + str;
    }
    return str;
  };

  exports.dateToString = (function() {
    var MONTHS;
    MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    return function(date) {
      var time;
      if (!date) {
        return date;
      } else if (date instanceof Date) {
        time = [lpad(date.getHours(), 2, '0'), lpad(date.getMinutes(), 2, '0'), lpad(date.getSeconds(), 2, '0')].join(':');
        return [MONTHS[date.getMonth()], date.getDate(), time].join(' ');
      } else {
        return '' + date;
      }
    };
  })();

  applyColors = exports.applyColors = function(message, colorList) {
    var color, i, len;
    if (message == null) {
      return message;
    }
    for (i = 0, len = colorList.length; i < len; i++) {
      color = colorList[i];
      message = colors[color](message);
    }
    return message;
  };

  toShortFilename = exports.toShortFilename = function(filename, basepath, replacement) {
    var ext, file, i, index, len, part, parts, shortenIndex;
    if (basepath == null) {
      basepath = null;
    }
    if (replacement == null) {
      replacement = "./";
    }
    if (basepath != null) {
      if (exports.isString(basepath) && !endsWith(basepath, path.sep)) {
        basepath += path.sep;
      }
      filename = filename.replace(basepath, replacement);
    }
    parts = filename.split(path.sep);
    file = parts[parts.length - 1];
    ext = path.extname(file);
    file = path.basename(file, ext);
    if (file === 'index') {
      shortenIndex = parts.length - 3;
      file = '';
    } else {
      shortenIndex = parts.length - 2;
    }
    parts[parts.length - 1] = file;
    for (index = i = 0, len = parts.length; i < len; index = ++i) {
      part = parts[index];
      if (index <= shortenIndex) {
        parts[index] = parts[index][0];
      }
    }
    return parts.join('/');
  };

  exports.srcToString = function(src, basepath, replacement) {
    var answer, file;
    if (basepath == null) {
      basepath = null;
    }
    if (replacement == null) {
      replacement = "./";
    }
    if (src == null) {
      return '';
    }
    file = (src.file != null ? toShortFilename(src.file, basepath, replacement) : '') + (src.line != null ? ":" + src.line : '');
    answer = (src.func != null) && file ? src.func + " (" + file + ")" : src.func != null ? src.func : file ? file : '';
    return answer;
  };

  EXPRESS_BUNYAN_LOGGER_FIELDS = ['remote-address', 'ip', 'method', 'url', 'referer', 'user-agent', 'body', 'short-body', 'http-version', 'response-time', 'status-code', 'req-headers', 'res-headers', 'incoming'];

  exports.isString = function(value) {
    return typeof value === 'string' || value && typeof value === 'object' && toString.call(value) === '[object String]' || false;
  };

}).call(this);
