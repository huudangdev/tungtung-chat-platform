"use strict";

function _interopDefault(ex) {
  return ex && "object" == typeof ex && "default" in ex ? ex.default : ex;
}

Object.defineProperty(exports, "__esModule", {
  value: !0
});

var styles, buffer, lastType, transform = _interopDefault(require("css-to-react-native")), React = require("react"), core = require("@emotion/core"), testAlwaysTrue = function() {
  return !0;
}, pickAssign = function(testFn, target) {
  for (var i = 2, length = arguments.length; i < length; i++) {
    var source = arguments[i], _key = void 0;
    for (_key in source) testFn(_key) && (target[_key] = source[_key]);
  }
  return target;
};

function interleave(vals) {
  for (var strings = vals[0], finalArray = [ strings[0] ], i = 1, len = vals.length; i < len; i++) finalArray.push(vals[i]), 
  void 0 !== strings[i] && finalArray.push(strings[i]);
  return finalArray;
}

function handleInterpolation(interpolation, i, arr) {
  var type = typeof interpolation;
  if ("string" === type && (interpolation = interpolation.replace(/\/\*[\s\S]*?\*\/|\/\/.*$/gm, "")), 
  "function" !== type) {
    var isIrrelevant = null == interpolation || "boolean" === type, isRnStyle = "object" === type && !Array.isArray(interpolation) || "number" === type;
    if ("string" === lastType && (isRnStyle || isIrrelevant)) {
      var converted = convertStyles(buffer);
      void 0 !== converted && styles.push(converted), buffer = "";
    }
    if (!isIrrelevant) {
      if ("string" === type && (buffer += interpolation, arr.length - 1 === i)) {
        var _converted = convertStyles(buffer);
        void 0 !== _converted && styles.push(_converted), buffer = "";
      }
      isRnStyle && styles.push(interpolation), Array.isArray(interpolation) && interpolation.forEach(handleInterpolation, this), 
      lastType = type;
    }
  } else void 0 === this || handleInterpolation.call(this, interpolation(this), i, arr);
}

function createCss(StyleSheet) {
  return function() {
    styles = [], buffer = "", lastType = void 0;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
    return (null == args[0] || void 0 === args[0].raw ? args : interleave(args)).forEach(handleInterpolation, this), 
    StyleSheet.flatten(styles);
  };
}

var propertyValuePattern = /\s*([^\s]+)\s*:\s*(.+?)\s*$/;

function convertPropertyValue(style) {
  var match = propertyValuePattern.exec(style);
  null !== match && " " !== match[2] && (match.shift(), this.push(match));
}

function convertStyles(str) {
  if ("" !== str.trim()) {
    var stylePairs = [];
    return str.split(";").forEach(convertPropertyValue, stylePairs), transform(stylePairs);
  }
}

var defaultPickTest = function(prop) {
  return "theme" !== prop && "innerRef" !== prop;
};

function createStyled(StyleSheet, _temp) {
  var _ref$getShouldForward = (void 0 === _temp ? {} : _temp).getShouldForwardProp, getShouldForwardProp = void 0 === _ref$getShouldForward ? function() {
    return defaultPickTest;
  } : _ref$getShouldForward, css = createCss(StyleSheet);
  return function createEmotion(component) {
    var pickTest = getShouldForwardProp(component);
    return function() {
      for (var styles, _len = arguments.length, rawStyles = new Array(_len), _key = 0; _key < _len; _key++) rawStyles[_key] = arguments[_key];
      styles = null == rawStyles[0] || void 0 === rawStyles[0].raw ? rawStyles : interleave(rawStyles);
      var Styled = React.forwardRef(function(props, ref) {
        return React.createElement(core.ThemeContext.Consumer, null, function(theme) {
          var mergedProps = pickAssign(testAlwaysTrue, {}, props, {
            theme: props.theme || theme
          }), stylesWithStyleProp = styles;
          props.style && (stylesWithStyleProp = styles.concat(props.style));
          var emotionStyles = css.apply(mergedProps, stylesWithStyleProp);
          return React.createElement(component, pickAssign(pickTest, {}, props, {
            ref: ref,
            style: emotionStyles
          }));
        });
      });
      return Styled.withComponent = function(newComponent) {
        return createEmotion(newComponent).apply(void 0, styles);
      }, Styled.displayName = "emotion(" + getDisplayName(component) + ")", Styled;
    };
  };
}

var getDisplayName = function(primitive) {
  return "string" == typeof primitive ? primitive : primitive.displayName || primitive.name || "Styled";
};

exports.createCss = createCss, exports.createStyled = createStyled;
