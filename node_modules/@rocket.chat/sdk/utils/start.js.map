{"version":3,"file":"start.js","sourceRoot":"","sources":["../../src/utils/start.ts"],"names":[],"mappings":"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","sourcesContent":["// Test script uses standard methods and env config to connect and log streams\nimport { botUser } from './config'\nimport { IMessage, ILogger } from '../interfaces'\nimport BotDriver from '../lib/clients/Bot'\n\nglobal.fetch = require('node-fetch')\n// Login settings - LDAP needs to be explicitly enabled\nexport let username = process.env.ROCKETCHAT_USER || 'g1'\nexport let password = process.env.ROCKETCHAT_PASSWORD || '1'\nexport let ldap = (process.env.ROCKETCHAT_AUTH === 'ldap')\n\n// Connection settings - Enable SSL by default if Rocket.Chat URL contains https\nexport let host = process.env.ROCKETCHAT_URL || 'http://localhost:3000'\nexport const useSsl = (process.env.ROCKETCHAT_USE_SSL && process.env.ROCKETCHAT_USE_SSL === 'true') || (host).toLowerCase().startsWith('https')\nexport let timeout = 20 * 1000 // 20 seconds\n\n// Respond settings - reactive callback filters for .respondToMessages\nexport let rooms = (process.env.ROCKETCHAT_ROOM)\n\t? (process.env.ROCKETCHAT_ROOM || '').split(',').map((room) => room.trim())\n\t: []\nexport let allPublic = (process.env.LISTEN_ON_ALL_PUBLIC || 'false').toLowerCase() === 'true'\nexport let dm = (process.env.RESPOND_TO_DM || 'false').toLowerCase() === 'true'\nexport let livechat = (process.env.RESPOND_TO_LIVECHAT || 'false').toLowerCase() === 'true'\nexport let edited = (process.env.RESPOND_TO_EDITED || 'false').toLowerCase() === 'true'\n\n// Message attribute settings\nexport let integrationId = process.env.INTEGRATION_ID || 'js.SDK'\n\n// Cache settings\nexport let roomCacheMaxSize = parseInt(process.env.ROOM_CACHE_SIZE || '10', 10)\nexport let roomCacheMaxAge = 1000 * parseInt(process.env.ROOM_CACHE_MAX_AGE || '300', 10)\nexport let dmCacheMaxSize = parseInt(process.env.DM_ROOM_CACHE_SIZE || '10', 10)\nexport let dmCacheMaxAge = 1000 * parseInt(process.env.DM_ROOM_CACHE_MAX_AGE || '100', 10)\n\n// Livechat settings\nexport let token = process.env.LIVECHAT_TOKEN || ''\nexport let rid = process.env.LIVECHAT_ROOM || ''\nexport let department = process.env.LIVECHAT_DEPARTMENT || ''\n\nconst delay = (ms: number) => new Promise((resolve, reject) => setTimeout(resolve, ms))\n\nclass L implements ILogger {\n  debug (...args: any[]) {\n    // console.log(...args)\n  }\n  info (...args: any[]) {\n    // console.log(...args)\n  }\n  warning (...args: any[]) {\n    // console.warn(...args)\n  }\n  warn (...args: any[]) { // legacy method\n    // return this.warning(...args)\n  }\n  error (...args: any[]) {\n    // console.error(...args)\n  }\n}\n\nconst driver = new BotDriver({ host, useSsl, timeout, logger: new L() } as any)\n// Start subscription to log message stream (used for e2e test and demo)\nasync function start () {\n  await driver.login({ username, password })\n  await driver.connect({})\n  // driver.subscribeNotifyAll()\n  // driver.subscribeLoggedNotify()\n  // driver.subscribeNotifyUser()\n\n  await driver.respondToMessages((err, msg, msgOpts) => {\n    if (err) throw err\n    console.log('[respond]', JSON.stringify(msg), JSON.stringify(msgOpts))\n    if (msg) demo(msg).catch((e) => console.error(e))\n  }, {\n    rooms: ['GENERAL'],\n    allPublic: false,\n    dm: true,\n    edited: true,\n    livechat: false\n  })\n}\n\n// Demo bot-style interactions\n// A: Listen for \"tell everyone <something>\" and send that something to everyone\n// B: Listen for \"who's online\" and tell that person who's online\nasync function demo (message: IMessage) {\n  if (!message.msg) return\n  if (/tell everyone/i.test(message.msg)) {\n    const match = message.msg.match(/tell everyone (.*)/i)\n    if (!match || !match[1]) return\n    // const sayWhat = `@${message.u!.username} says \"${match[1]}\"`\n\n    const usernames = await driver.users.allNames()\n    for (let username of usernames) {\n      if (username && username !== botUser.username) {\n\t\t\t\t// const toWhere =\n        await driver.getDirectMessageRoomId(username)\n        await delay(200) // delay to prevent rate-limit error\n      }\n    }\n  } else if (/who\\'?s online/i.test(message.msg)) {\n    const names = await driver.users.onlineNames()\n    const niceNames = names.join(', ').replace(/, ([^,]*)$/, ' and $1')\n    await driver.sendToRoomId(niceNames + ' are online', message.rid!)\n  }\n}\n\nstart().catch((e) => console.error(e))\n"]}