{"version":3,"file":"testing.js","sourceRoot":"","sources":["../../src/utils/testing.ts"],"names":[],"mappings":"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","sourcesContent":["import ApiBase from '../lib/api/api'\nimport { apiUser, botUser, mockUser } from './config'\nimport {\n  IMessageAPI,\n  IMessageUpdateAPI,\n  IMessageResultAPI,\n  INewUserAPI,\n  IRoomResultAPI,\n  IChannelResultAPI,\n  IGroupResultAPI,\n  IHistoryAPI,\n  IMessageReceipt,\n\tIUserAPI\n} from '../interfaces'\n\nconst api = new ApiBase({})\n\n/** Define common attributes for DRY tests */\nexport const testChannelName = 'tests'\nexport const testPrivateName = 'p-tests'\n\n/** Get information about a user */\nexport async function userInfo (username: string) {\n  return (await api.get('users.info', { username }, true) as IUserAPI)\n}\n\n/** Create a user and catch the error if they exist already */\nexport async function createUser (user: INewUserAPI) {\n  return (await api.post('users.create', user, true, /already in use/i)) as IUserAPI\n}\n\n/** Get information about a channel */\nexport async function channelInfo (query: { roomName?: string, roomId?: string }) {\n  return api.get('channels.info', query, true) as Promise<IChannelResultAPI>\n}\n\n/** Get information about a private group */\nexport async function privateInfo (query: { roomName?: string, roomId?: string }) {\n  return api.get('groups.info', query, true) as Promise<IGroupResultAPI>\n}\n\n/** Get the last messages sent to a channel (in last 10 minutes) */\nexport async function lastMessages (roomId: string, count: number = 1) {\n  const now = new Date()\n  const latest = now.toISOString()\n  const oldest = new Date(now.setMinutes(now.getMinutes() - 10)).toISOString()\n  const history = (await api.get('channels.history', { roomId, latest, oldest, count }) as IHistoryAPI)\n  return history.messages\n}\n\n/** Create a room for tests and catch the error if it exists already */\nexport async function createChannel (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (await api.post('channels.create', { name, members, readOnly }, true) as IChannelResultAPI)\n}\n\n/** Create a private group / room and catch if exists already */\nexport async function createPrivate (\n  name: string,\n  members: string[] = [],\n  readOnly: boolean = false\n) {\n  return (api.post('groups.create', { name, members, readOnly }, true))\n}\n\n/** Send message from mock user to channel for tests to listen and respond */\n/** @todo Sometimes the post request completes before the change event emits\n *        the message to the streamer. That's why the interval is used for proof\n *        of receipt. It would be better for the endpoint to not resolve until\n *        server side handling is complete. Would require PR to core.\n */\nexport async function sendFromUser (payload: any): Promise<IMessageResultAPI> {\n  const user = await api.login({ username: mockUser.username, password: mockUser.password })\n  const endpoint = (payload.roomId && payload.roomId.indexOf(user.userId) !== -1)\n    ? 'dm.history'\n    : 'channels.history'\n  const roomId = (payload.roomId)\n    ? payload.roomId\n    : (await channelInfo({ roomName: testChannelName })).channel._id\n  const messageDefaults: IMessageAPI = { roomId }\n  const data: IMessageAPI = Object.assign({}, messageDefaults, payload)\n  const oldest = new Date().toISOString()\n  const result = (await api.post('chat.postMessage', data, true) as IMessageResultAPI)\n  const proof = new Promise((resolve, reject) => {\n    let looked = 0\n    const look = setInterval(async () => {\n      const { messages } = (await api.get(endpoint, { roomId, oldest }) as IHistoryAPI)\n      const found = messages.some((message: IMessageReceipt) => {\n        return result.message._id === message._id\n      })\n      if (found || looked > 10) {\n        clearInterval(look)\n        if (found) resolve()\n        else reject('API send from user, proof of receipt timeout')\n      }\n      looked++\n    }, 100)\n  })\n  await proof\n  return result\n}\n\n/** Leave user from room, to generate `ul` message (test channel by default) */\nexport async function leaveUser (room: { id?: string, name?: string } = {}) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.leave', { roomId }) as Boolean)\n}\n\n/** Invite user to room, to generate `au` message (test channel by default) */\nexport async function inviteUser (room: { id?: string, name?: string } = {}) {\n  let mockInfo = await userInfo(mockUser.username)\n  await api.login({ username: apiUser.username, password: apiUser.password })\n  if (!room.id && !room.name) room.name = testChannelName\n  const roomId = (room.id)\n    ? room.id\n    : (await channelInfo({ roomName: room.name })).channel._id\n  return (await api.post('channels.invite', { userId: mockInfo._id, roomId }) as boolean)\n}\n\n/** @todo : Join user into room (enter) to generate `uj` message type. */\n\n/** Update message sent from mock user */\nexport async function updateFromUser (payload: IMessageUpdateAPI) {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('chat.update', payload, true) as IMessageResultAPI)\n}\n\n/** Create a direct message session with the mock user */\nexport async function setupDirectFromUser () {\n  await api.login({ username: mockUser.username, password: mockUser.password })\n  return (await api.post('im.create', { username: botUser.username }, true) as IRoomResultAPI)\n}\n\n/** Initialise testing instance with the required users for SDK/bot tests */\nexport async function setup () {\n  console.log('\\nPreparing instance for tests...')\n  try {\n\t\t// Verify API user can login\n    await api.login({ password: apiUser.password, username: apiUser.username })\n    console.log(`API user (${apiUser.username}) logged in`)\n  } catch (error) {\n    console.log(error, apiUser)\n    throw new Error(`API user (${apiUser.username}) could not login`)\n  }\n\n  try {\n    const botInfo = await userInfo(botUser.username)\n    console.log(`API user (${botInfo.username}) exists`)\n  } catch (error) {\n    console.log(`Bot user (${botUser.username}) not found`)\n    const botInfo = await createUser(botUser)\n    // if (!botInfo.success) {\n    //   throw new Error(`Bot user (${botUser.username}) could not be created`)\n    // }\n    console.log(`Bot user (${botInfo.username}) created`)\n  }\n  try {\n\t\t// Verify or create mock user for talking to bot\n    let mockInfo = await userInfo(mockUser.username)\n    console.log(`Mock user (${mockInfo.username}) exists`)\n  } catch (error) {\n    console.log(`Mock user (${mockUser.username}) not found`)\n    const mockInfo = await createUser(mockUser)\n    // if (!mockInfo || mockInfo.success) {\n    //   throw new Error(`Mock user (${mockUser.username}) could not be created`)\n    // }\n    console.log(`Mock user (${mockInfo.username}) created`)\n  }\n  try {\n\t\t// Verify or create user for bot\n    // Verify or create channel for tests\n    await channelInfo({ roomName: testChannelName })\n    console.log(`Test channel (${testChannelName}) exists`)\n  } catch (e) {\n    console.log(`Test channel (${testChannelName}) not found`)\n    await createChannel(testChannelName, [\n      apiUser.username, botUser.username, mockUser.username\n    ])\n    // if (!testChannelInfo.success) {\n    //   throw new Error(`Test channel (${testChannelName}) could not be created`)\n    // }\n    console.log(`Test channel (${testChannelName}) created`)\n  }\n  try {\n    // Verify or create private room for tests\n    await privateInfo({ roomName: testPrivateName })\n    console.log(`Test private room (${testPrivateName}) exists`)\n  } catch (error) {\n    const testPrivateInfo = await createPrivate(testPrivateName, [\n      apiUser.username, botUser.username, mockUser.username\n    ])\n    console.log(`Test private room (${testPrivateInfo.name}) created`)\n  }\n  await api.logout()\n}\n"]}