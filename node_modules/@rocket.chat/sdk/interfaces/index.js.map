{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/interfaces/index.ts"],"names":[],"mappings":";;AAkFA,2CAA2C;AAC3C,SAAgB,WAAW,CAAE,MAAW;IACtC,OAAO,CACL,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,QAAQ;QACf,MAAM,CAAC,IAAI,CAAC,QAAQ,KAAK,SAAS;QAClC,MAAM,CAAC,QAAQ,CAAC,MAAM,KAAK,SAAS,CACrC,CAAA;AACH,CAAC;AAPD,kCAOC;AAOD,2CAA2C;AAC3C,SAAgB,YAAY,CAAE,MAAW;IACvC,OAAO,CACL,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,eAAe,KAAK,SAAS;QACpC,MAAM,CAAC,gBAAgB,KAAK,SAAS,CACtC,CAAA;AACH,CAAC;AAND,oCAMC;AAOD,2CAA2C;AAC3C,SAAgB,oBAAoB,CAAE,MAAW;IAC/C,OAAO,CAAC,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,CAAA;AACtC,CAAC;AAFD,oDAEC;AA6BD,2CAA2C;AAC3C,SAAgB,aAAa,CAAE,MAAW;IACxC,OAAO,CAAC,MAAM,CAAC,KAAK,KAAK,SAAS,CAAC,CAAA;AACrC,CAAC;AAFD,sCAEC","sourcesContent":["/** Loggers need to provide the same set of methods */\nexport interface ILogger {\n  debug: (...args: any[]) => void\n  info: (...args: any[]) => void\n  warning: (...args: any[]) => void\n  warn: (...args: any[]) => void\n  error: (...args: any[]) => void\n}\n\n/**\n * Connection options type\n * @param host        Host URL:PORT, converted to websocket protocol\n * @param useSsl      Use SSL (https/wss) to connect\n * @param timeout     How long to wait (ms) before abandoning connection\n * @param reopen      ms interval before attempting reopens on disconnect\n * @param ping        ms interval between each ping\n * @param close       ms interval to wait for socket close to succeed\n * @param integration Name added to message `bot` attribute to identify SDK use\n */\nexport interface ISocketOptions {\n  host?: string\n  useSsl?: boolean\n  timeout?: number\n  reopen?: number\n  ping?: number\n  close?: number\n  integration?: string\n}\n\n/**\n * DDP Message Handler defines attributes to match on incoming messages and\n * fire a callback. There may be multiple handlers for any given message.\n * @param callback    Function to call when matching message received\n * @param persist     Optionally (true) to continue using handler after matching\n * @param msg         The `data.msg` value to match in message\n * @param id          The `data.id` value to match in message\n * @param collection  The `data.collection` value to match in message\n */\nexport interface ISocketMessageHandler {\n  callback: ISocketMessageCallback\n  persist?: boolean\n  msg?: string\n  id?: string\n  collection?: string\n}\n\n/** Function interface for DDP message handler callback */\nexport interface ISocketMessageCallback {\n  (data: any): void\n}\n\n/**\n * Message respond options\n * @param rooms       Respond to only selected room/s (names or IDs)\n * @param allPublic   Respond on all public channels (ignores rooms if true)\n * @param dm          Respond to messages in DM / private chats\n * @param livechat    Respond to messages in livechat\n * @param edited      Respond to edited messages\n */\nexport interface IRespondOptions {\n  rooms?: string[]\n  allPublic?: boolean\n  dm?: boolean\n  livechat?: boolean\n  edited?: boolean\n}\n\n/** User credentials generic interface */\nexport interface ICredentials {\n  password: string\n  username: string\n  email?: string\n  ldap?: boolean\n  ldapOptions?: object\n}\n\n/** User credentials for password login method */\nexport interface ICredentialsPass {\n  user: { username: string }\n  password: { digest: string, algorithm: string }\n}\n\n/** Password login credential type guard */\nexport function isLoginPass (params: any): params is ICredentialsPass {\n  return (\n    params.user &&\n    params.password &&\n    params.user.username !== undefined &&\n    params.password.digest !== undefined\n  )\n}\n\n/** User credentials for oath login method  */\nexport interface ICredentialsOAuth {\n  oauth: { credentialToken: string, credentialSecret: string }\n}\n\n/** Password login credential type guard */\nexport function isLoginOAuth (params: any): params is ICredentialsOAuth {\n  return (\n    params.oath &&\n    params.credentialToken !== undefined &&\n    params.credentialSecret !== undefined\n  )\n}\n\n/** User credentials for authenticated login method */\nexport interface ICredentialsAuthenticated {\n  resume: string\n}\n\n/** Password login credential type guard */\nexport function isLoginAuthenticated (params: any): params is ICredentialsAuthenticated {\n  return (params.resume !== undefined)\n}\n\n/**\n * Common args for POST, GET, PUT, DELETE requests\n * @param endpoint The API endpoint (including version) e.g. `chat.update`\n * @param data     Payload for POST request to endpoint\n * @param auth     Require auth headers for endpoint, default true\n * @param ignore   Allows certain matching error messages to not count as errors\n */\nexport interface IAPIRequest {\n  (\n    endpoint: string,\n    data?: any,\n    auth?: boolean,\n    ignore?: RegExp,\n    options?: any\n  ): Promise<any>\n}\n\n/**\n * Response from login method (called by websocket)\n * @todo make test to inspect websocket login result interface\n */\nexport interface ILoginResult {\n  id: string, // userId\n  token: string,\n  createCipher: { '$date': number }\n}\n\n/** Password login credential type guard */\nexport function isLoginResult (params: any): params is ILoginResult {\n  return (params.token !== undefined)\n}\n\n/** Credentials for logging into API */\nexport interface ICredentialsAPI {\n  username: string\n  password: string\n}\n\n/**\n * Result object from an API login\n * @param status      e.g. 'success'\n * @param data        Logged in user data\n * @param data.authToken Login renewal token\n * @param userId      ID of logged-in user\n */\nexport interface ILoginResultAPI {\n  status: string // e.g. 'success'\n  data: {\n    authToken: string\n    userId: string\n  }\n}\n\n/** Error-first callback param type */\nexport interface ICallback {\n  (error: Error | null, ...args: any[]): void\n}\n\n/** Error-first callback for message stream events */\nexport interface IMessageCallback {\n  (error: Error | null, message?: IMessage, meta?: IMessageMeta): void\n}\n\n/**\n * Websocket stream subscription\n * @param id          Subscription ID\n * @param name        Stream/collection name\n * @param unsubscribe Method for unsubscribing\n */\nexport interface ISubscription {\n  id?: string\n  name?: any\n  unsubscribe: () => Promise<any>\n  onEvent: (callback: ISocketMessageCallback) => void\n  [key: string]: any\n}\n\n/**\n * Subscription events (changes) in message stream\n * @param msg         The event type (usually 'change')\n * @param collection  Streamed collection name, e.g. 'stream-room-messages'\n * @param id          Collection ID (some streams don't include other than 'id')\n * @param fields      Emitted event arguments\n * @param fields.eventName The room or sub-collection name for this event\n * @param fields.args Event rgs, for message events it will be message and meta\n */\nexport interface ISubscriptionEvent {\n  msg: string\n  collection: 'stream-room-messages'\n  id: 'id'\n  fields: {\n    eventName: '__my_messages__'\n    args: [ IMessage, IMessageMeta ]\n  }\n}\n\n/**\n * API result for channel.history request\n * @todo Incomplete\n */\nexport interface IHistoryAPI {\n  messages: IMessageReceipt[]\n}\n\n/**\n * Message schema\n * @param rid         Room ID\n * @param _id         Mongo collection ID generated by Random.id()\n * @param t           Room type e.g. \"c\" for channel\n * @param msg         Text content\n * @param alias       ?\n * @param emoji       Emoji to use as avatar\n * @param avatar      URL of avatar image\n * @param groupable   Group with consecutive messages\n * @param bot         Integration details\n * @param urls        ?\n * @param mentions    ?\n * @param u           User who sent the message\n * @param ts          Message created timestamp\n * @param editedBy    User who edited the message\n * @param editedAt    When the message was edited\n * @todo contribute these to @types/rocketchat and require\n */\nexport interface IMessage {\n  rid?: string\n  _id?: string\n  t?: string\n  msg?: string\n  alias?: string\n  emoji?: string\n  avatar?: string\n  groupable?: boolean\n  bot?: any\n  urls?: string[]\n  mentions?: string[]\n  attachments?: IMessageAttachment[]\n  reactions?: IMessageReaction\n  location ?: IMessageLocation\n  u?: IUser\n  ts?: { '$date': Date }\n  editedBy?: IUser\n  editedAt?: { '$date': Date }\n}\n\n/**\n * Extra details emitted about message in stream events.\n * @param roomParticipant If the logged in user was joined to the room\n * @param roomType    Type of room (public, private, DM, livechat)\n * @param roomName    The room name if public or named private group\n */\nexport interface IMessageMeta {\n  roomParticipant: boolean\n  roomType: RoomType\n  roomName?: 'general'\n}\n\n/**\n * Message receipt returned after send (not the same as sent object).\n * @todo Confirm why/if this is actually different to IMessage, e.g. msg vs text\n * @param _id         ID of sent message\n * @param rid         Room ID of sent message\n * @param alias       ?\n * @param msg         Content of message\n * @param parseUrls   URL parsing enabled on message hooks\n * @param groupable   Grouping message enabled\n * @param ts          Timestamp of message creation\n * @param _updatedAt  Time message last updated\n * @param editedAt    Time updated by edit\n */\nexport interface IMessageReceipt {\n  _id: string\n  rid: string\n  alias: string\n  msg: string\n  parseUrls: boolean\n  groupable: boolean\n  ts: string\n  _updatedAt: string\n  editedAt?: string\n  u: IUser\n  editedBy?: IUser\n  attachments?: IAttachmentAPI[]\n  reactions?: IMessageReaction\n}\n\n/**\n * Payload structure for `chat.postMessage` endpoint\n * @param roomId      The room id of where the message is to be sent\n * @param channel     The channel name with the prefix in front of it\n * @param text        The text of the message to send is optional because of attachments\n * @param alias       This will cause the messenger name to appear as the given alias but username will still display\n * @param emoji       If provided this will make the avatar on this message be an emoji\n * @param avatar      If provided this will make the avatar use the provided image url\n */\nexport interface IMessageAPI {\n  roomId: string\n  channel?: string\n  text?: string\n  alias?: string\n  emoji?: string\n  avatar?: string\n  attachments?: IAttachmentAPI[]\n}\n\n/**\n * Payload structure for `chat.update` endpoint\n * @param roomId      The room id of where the message is\n * @param msgId       The message id to update\n * @param text        Updated text for the message\n */\nexport interface IMessageUpdateAPI {\n  roomId: string\n  msgId: string\n  text: string\n}\n\n/** Message Attachment schema */\nexport interface IMessageAttachment {\n  fields?: IAttachmentField[]\n  actions?: IMessageAction[]\n  color?: string\n  text?: string\n  ts?: string\n  thumb_url?: string\n  message_link?: string\n  collapsed?: boolean\n  author_name?: string\n  author_link?: string\n  author_icon?: string\n  title?: string\n  title_link?: string\n  title_link_download?: string\n  image_url?: string\n  audio_url?: string\n  video_url?: string\n}\n\n/** Attachment field schema */\nexport interface IAttachmentField {\n  short?: boolean\n  title?: string\n  value?: string\n}\n\n/** Message emoji reaction attribute schema (emoji: [usernames that reacted]) */\nexport interface IMessageReaction {\n  [emoji: string]: { usernames: string[] }\n}\n\n/** Rich message action schema */\nexport interface IMessageAction {\n  type?: string\n  text?: string\n  url?: string\n  image_url?: string\n  is_webview?: boolean\n  webview_height_ratio?: 'compact' | 'tall' | 'full'\n  msg?: string\n  msg_in_chat_window?: boolean\n  button_alignment?: 'vertical' | 'horizontal'\n  temporary_buttons?: boolean\n}\n\n/** Geo-location attribute schema */\nexport interface IMessageLocation {\n  type: string                // e.g. Point\n  coordinates: string[]       // longitude latitude\n}\n\n/**\n * Payload structure for message attachments\n * @param color       The color you want the order on the left side to be any value background-css supports\n * @param text        The text to display for this attachment it is different than the message text\n * @param ts          ISO timestamp displays the time next to the text portion\n * @param thumb_url   An image that displays to the left of the text looks better when this is relatively small\n * @param message_link Only applicable if the ts is provided as it makes the time clickable to this link\n * @param collapsed   Causes the image audio and video sections to be hiding when collapsed is true\n * @param author_name Name of the author\n * @param author_link Providing this makes the author name clickable and points to this link\n * @param author_icon Displays a tiny icon to the left of the author's name\n * @param title       Title to display for this attachment displays under the author\n * @param title_link  Providing this makes the title clickable pointing to this link\n * @param title_link_download_true When this is true a download icon appears and clicking this saves the link to file\n * @param image_url   The image to display will be “big” and easy to see\n * @param audio_url   Audio file to play only supports what html audio does\n * @param video_url   Video file to play only supports what html video does\n */\nexport interface IAttachmentAPI {\n  color?: string\n  text?: string\n  ts?: string\n  thumb_url?: string\n  message_link?: string\n  collapsed?: boolean\n  author_name?: string\n  author_link?: string\n  author_icon?: string\n  title?: string\n  title_link?: string\n  title_link_download_true?: string\n  image_url?: string\n  audio_url?: string\n  video_url?: string\n  fields?: IAttachmentFieldAPI[]\n  actions?: IMessageAction[]\n}\n\n/**\n * Payload structure for attachment field object\n * The field property of the attachments allows for “tables” or “columns” to be displayed on messages\n * @param short       Whether this field should be a short field\n * @param title       The title of this field\n * @param value       The value of this field displayed underneath the title value\n */\nexport interface IAttachmentFieldAPI {\n  short?: boolean\n  title: string\n  value: string\n}\n\n/**\n * Result structure for message endpoints\n * @param ts          Seconds since unix epoch\n * @param channel     Name of channel without prefix\n * @param message     Sent message\n * @param success     Send status\n */\nexport interface IMessageResultAPI {\n  ts: number\n  channel: string\n  message: IMessageReceipt\n  success: boolean\n}\n\n/**\n * User (as attribute) schema\n * @param _id         Mongo collection ID generated by Random.id()\n * @param username    Username\n * @param name        Display name\n */\nexport interface IUser {\n  _id: string\n  username: string\n  name?: string\n}\n\n/**\n * User object structure for creation endpoints\n * @param email       Email address\n * @param name        Full name\n * @param password    User pass\n * @param username    Username\n * @param active      Subscription is active\n * @param roles       Role IDs\n * @param joinDefaultChannels Auto join channels marked as default\n * @param requirePasswordChange Direct to password form on next login\n * @param sendWelcomeEmail  Send new credentials in email\n * @param verified    Email address verification status\n */\nexport interface INewUserAPI {\n  email?: string\n  name?: string\n  password: string\n  username: string\n  active?: true\n  roles?: string[]\n  joinDefaultChannels?: boolean\n  requirePasswordChange?: boolean\n  sendWelcomeEmail?: boolean\n  verified?: true\n}\n\n/**\n * User object structure for queries (not including admin access level)\n * @param _id         MongoDB user doc ID\n * @param type        user / bot ?\n * @param status      online | offline\n * @param active      Subscription is active\n * @param name        Full name\n * @param utcOffset   Hours off UTC/GMT\n * @param username    Username\n */\nexport interface IUserAPI {\n  _id: string\n  type: string\n  status: string\n  active: boolean\n  name: string\n  utcOffset: number\n  username: string\n}\n\n/**\n * Result structure for user data request (by non-admin)\n * @param user    The requested user\n * @param success Status of request\n */\nexport interface IUserResultAPI {\n  user: IUserAPI\n  success: boolean\n}\n\n/** Room type literal (channel private direct livechat) */\nexport type RoomType = 'c' | 'p' | 'd' | 'l'\n\n/**\n * Room object structure from API\n * @param _id         Room ID\n * @param _updatedAt  ISO timestamp\n * @param ts          ISO timestamp (current time in room?)\n * @param msgs        Count of messages in room\n */\nexport interface IRoomAPI {\n  t: RoomType\n  _id: string\n  _updatedAt: string\n  ts: string\n  msgs: number\n  meta: IRoomMetaAPI\n}\n\n/** Room result meta from API */\nexport interface IRoomMetaAPI {\n  revision: number\n  created: number\n  version: number\n}\n\n/**\n * Channel result schema\n * @param _id         Channel ID\n * @param name        Channel name\n * @param default     Is default channel\n * @param ts          ISO timestamp (current time in room?)\n * @param msgs        Count of messages in room\n */\nexport interface IChannelAPI {\n  t: RoomType\n  _id: string\n  name: string\n  default: boolean\n  ts: string\n  msgs: number\n  u: IUser\n}\n\n/**\n * Group (private room) result schema\n * @param _id         Group ID\n * @param name        Group name\n * @param default     Is default channel (would be false)\n * @param usernames   Users in group\n * @param msgs        Count of messages in room\n * @param ts          ISO timestamp (current time in room?)\n */\nexport interface IGroupAPI {\n  t: RoomType\n  _id: string\n  name: string\n  default: boolean\n  usernames: string[]\n  msgs: number\n  ts: string\n  u: IUser\n}\n\n/** Result structure for room creation (e.g. DM) */\nexport interface IRoomResultAPI {\n  room: IRoomAPI\n  success: boolean\n}\n\n/** Result structure for channel creation */\nexport interface IChannelResultAPI {\n  channel: IChannelAPI\n  success: boolean\n}\n\n/** Result structure for group creation */\nexport interface IGroupResultAPI {\n  group: IGroupAPI\n  success: boolean\n}\n\n/** Structure for livechat token field api */\nexport interface ILivechatTokenAPI {\n  token: string\n}\n\n/** Structure for livechat room credential api */\nexport interface ILivechatRoomCredentialAPI {\n  token: string\n}\n/** Structure for livechat room credential api */\nexport interface ILivechatRoom {\n  rid: string\n  department?: string\n}\n\n/** Structure to get(new) livechat room */\nexport interface INewLivechatRoomCredentialAPI {\n  rid?: string\n  agentId?: string\n}\n\n/** Structure for livechat room messages api */\nexport interface ILivechatRoomMessagesAPI {\n  token: string   // Visitor token\n  ts?: string     // ISO timestamp\n  end?: string    // ISO timestamp\n  limit?: number   // number of messages to load\n}\n\n/** Payload structure for livechat `room.transfer` endpoint */\nexport interface ILivechatRoomTransferAPI {\n  token: string\n  department: string\n}\n\n/** Payload structure for livechat survey values */\nexport interface ILivechatSurveyAPI {\n  name: 'satisfaction' | 'agentKnowledge' | 'agentResponsiveness' | 'agentFriendliness'\n  value: '1' | '2' | '3' | '4' | '5'\n}\n\n/** Payload structure for livechat `room.transfer` endpoint */\nexport interface ILivechatRoomSurveyAPI {\n  rid: string\n  data?: ILivechatSurveyAPI[] // See surcvey interface above\n}\n\n/** Livechat New Room object structure */\nexport interface ILivechatNewRoomAPI {\n  _id: string           // Room ID\n  _updatedAt: string    // ISO timestamp\n  t: 'r'                // Room type (channel, private, direct, livechat)\n  msgs: number          // Count of messages in room\n  ts: string            // ISO timestamp (current time in room?)\n  lm?: string           // ISO timestamp (last message)\n  open?: boolean        // Room status\n  departmentId?: string // Livechat Department _id\n  fname: string         // Room display name\n  v: {\n\t  _id: number         // Visitor ID\n\t  token: string       // Visitor token\n\t  username: number    // Visitor username\n  }\n}\n\n/** Result structure for room creation (e.g. DM) */\nexport interface ILivechatNewRoomResultAPI {\n  room: ILivechatNewRoomAPI\n  newRoom: boolean\n  success: boolean\n}\n\n/** Custom Field object structure for livechat endpoints */\nexport interface ILivechatGuestCustomFieldAPI {\n  key: string\n  value: string\n  overwrite: boolean\n}\n\n/** Payload structure for new Livechat Visitors */\nexport interface ILivechatGuestAPI {\n  token: string\n  name?: string\n  email?: string\n  department?: string\n  phone?: string\n  username?: string\n  customFields?: ILivechatGuestCustomFieldAPI[]\n}\n\n/** Visitor object structure for livechat endpoints */\nexport interface INewLivechatGuestAPI {\n  visitor: ILivechatGuestAPI\n}\n\n/** Payload structure for new Livechat Message */\nexport interface INewLivechatMessageAPI {\n  _id?: string          // Message ID\n  msg: string           // Message text\n  token: string         // Livechat Token\n  rid: string           // Room ID\n  agent?: {\n    agentId: string\n    username: string\n  }\n}\n\n/** Result structure for visitor emails */\nexport interface ILivechatEmailAPI {\n  address: string,\n  verified?: boolean\n}\n\n/** Result structure for visitor phones */\nexport interface ILivechatVisitorPhoneAPI {\n  phoneNumber: string\n}\n\n/** Result structure for visitor prop */\nexport interface ILivechatVisitorAPI {\n  token: string\n  _updatedAt: string\n  name?: string\n  phone?: ILivechatVisitorPhoneAPI[]\n  username: string\n  visitorEmails?: ILivechatEmailAPI[]\n  livechatData?: object\n}\n\n/** Result structure for visitor creation */\nexport interface ILivechatVisitorResultAPI {\n  visitor: ILivechatVisitorAPI\n  success: boolean\n}\n\n/** Result structure for config survey */\nexport interface ILivechatConfigSurveyAPI {\n  items: ['satisfaction', 'agentKnowledge', 'agentResponsiveness', 'agentFriendliness']\n  values: ['1', '2', '3', '4', '5']\n}\n\n/** Result structure for config prop */\nexport interface ILivechatConfigAPI {\n  enabled: boolean\n  online?: boolean\n  settings?: object\n  theme?: object\n  messages?: object\n  survey?: ILivechatConfigSurveyAPI,\n  guest?: ILivechatGuestAPI\n}\n\n/** Result structure for Livechat config */\nexport interface ILivechatConfigResultAPI {\n  config: ILivechatConfigAPI\n  success: boolean\n}\n\n/** Livechat Room object structure */\nexport interface ILivechatRoomAPI {\n  _id: string           // Room ID\n  open?: boolean        // Room status\n  departmentId?: string // Livechat Department _id\n  servedBy: {\n\t  _id: number         // Agent ID\n    username: number    // Agent username\n  }\n}\n\n/** Result structure for room */\nexport interface ILivechatRoomResultAPI {\n  room: ILivechatRoomAPI\n  success: boolean\n}\n\n/** Livechat Agent object structure */\nexport interface ILivechatAgentAPI {\n  _id: string           // Agent ID\n  name: string          // Agent name\n  username: string      // Agent username\n  emails: ILivechatEmailAPI[]\n}\n\n/** Result structure for agent */\nexport interface ILivechatAgentResultAPI {\n  agent: ILivechatAgentAPI\n  success: boolean\n}\n\n/** Livechat Message object structure */\nexport interface ILivechatMessageAPI {\n  msg: string\n  u: {\n    _id: string\n    username: string\n    name: string\n  }\n  ts: string\n}\n\n/** Result structure for Livechat Message */\nexport interface ILivechatMessageResultAPI {\n  message: ILivechatMessageAPI\n  success: boolean\n}\n\n/** Payload structure for new Livechat Offline Message */\nexport interface INewLivechatOfflineMessageAPI {\n  name: string          // Message Name\n  email: string         // Message email\n  message: string       // Message text\n}\n\n/** Result structure for Livechat Offline Message */\nexport interface ILivechatOfflineMessageResultAPI {\n  message: string\n  success: boolean\n}\n\n/** Navigation object structure for livechat endpoints */\nexport interface ILivechatNavigation {\n  change: string      // Action (Url or Page Title)\n  title: string       // Page Title\n  location: {\n    href: string\n  }\n  token?: string\n}\n\n/** Payload structure for new Livechat Visitor Navigation */\nexport interface INewLivechatNavigationAPI {\n  token: string         // Livechat Token\n  rid: string           // Room ID\n  pageInfo: ILivechatNavigation\n}\n\n/** Result structure for Livechat Navigation */\nexport interface ILivechatNavigationResultAPI {\n  page?: {\n    msg: string\n    navigation: ILivechatNavigation\n  }\n  success: boolean\n}\n\n/** Result structure for Livechat Transcript */\nexport interface ILivechatTranscriptResultAPI {\n  message: string\n  success: boolean\n}\n\n/** Livechat VideoCall object structure */\nexport interface ILivechatVideoCallAPI {\n  rid: string           // Room ID\n  domain: string        // Video Call provider domain\n  provider: string      // Video Call provider name\n  room: string          // Video Call room\n}\n\n/** Result structure for Livechat VideoCall */\nexport interface ILivechatVideoCallResultAPI {\n  videoCall: ILivechatVideoCallAPI\n  success: boolean\n}\n\n/** Payload structure for new Livechat CustomField */\nexport interface ILivechatCustomFieldAPI {\n  key: string\n  value: string\n  overwrite: boolean\n}\n\n/** Livechat CustomField object structure */\nexport interface INewLivechatCustomFieldAPI {\n  key: string          // CustomField key\n  value: string        // CustomField value\n  overwrite: boolean   // Overwrite CustomField value if exists\n}\n\n/** Result structure for Livechat CustomField */\nexport interface ILivechatCustomFieldResultAPI {\n  field: ILivechatCustomFieldAPI\n  success: boolean\n}\n\n/** Structure for Livechat CustomFields api */\nexport interface INewLivechatCustomFieldsAPI {\n  token: string   // Visitor token\n  customFields: ILivechatCustomFieldAPI[]\n}\n\n/** Result structure for Livechat CustomFields */\nexport interface ILivechatCustomFieldsResultAPI {\n  fields: ILivechatCustomFieldAPI[]\n  success: boolean\n}\n\n/** Structure for Livechat Upload api */\nexport interface ILivechatUploadAPI {\n  rid: string\n  file: File\n}\n"]}