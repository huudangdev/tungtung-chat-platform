{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/drivers/index.ts"],"names":[],"mappings":";AAAA;;;GAGG;;AAqDH,IAAY,SAGX;AAHD,WAAY,SAAS;IACpB,0BAAa,CAAA;IACb,wBAAW,CAAA;AACZ,CAAC,EAHW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAGpB","sourcesContent":["/**\n * @module Socket\n * Provides high-level helpers for DDP connection, method calls, subscriptions.\n */\n\nimport { EventEmitter } from 'tiny-events'\nimport {\n  ILogger,\n  ISocketOptions,\n  ICallback,\n  ISubscription,\n  ICredentials\n} from '../../interfaces'\n\nexport interface ISocket {\n  logger: ILogger\n  connect (options: ISocketOptions): Promise<ISocket | IDriver>\n  disconnect (): Promise<ISocket>\n  subscribe (topic: string, ...args: any[]): Promise<ISubscription>\n  unsubscribe (subscription: ISubscription): Promise<ISocket>\n  unsubscribeAll (): Promise<ISocket>\n\n  onStreamData (event: string, cb: ICallback): Promise<any>\n\n  on (event: string, listener: Function): EventEmitter\n  once (event: string, listener: Function): EventEmitter\n  off (event?: string, listener?: Function): EventEmitter\n  emit (event: string, ...args: any[]): boolean\n  listeners (event: string): Function[]\n  removeAllListeners (event?: string): Function[]\n  hasListeners (event: string): boolean\n}\n\nexport interface IDriver {\n  config: any\n  login (credentials: ICredentials, args: any): Promise<any>\n\n  subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]>\n\n  onMessage (cb: ICallback): void\n\n  subscribeNotifyAll (): Promise<any>\n\n  subscribeLoggedNotify (): Promise<any>\n\n  subscribeNotifyUser (): Promise<any>\n\n  subscribeNotifyUser (): Promise<IDriver>\n\n  onTyping (cb: ICallback): Promise<any>\n\n  notifyVisitorTyping (rid: string, username: string, typing: boolean, token: string): Promise<any>\n\n  methodCall (method: string, ...args: any[]): Promise<any>\n}\n\nexport enum Protocols {\n\tMQTT = 'mqtt',\n\tDDP = 'ddp'\n}\n"]}