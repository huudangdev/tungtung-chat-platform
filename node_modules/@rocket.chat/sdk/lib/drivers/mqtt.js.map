{"version":3,"file":"mqtt.js","sourceRoot":"","sources":["../../../src/lib/drivers/mqtt.ts"],"names":[],"mappings":"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","sourcesContent":["import { Client } from 'paho-mqtt/src/paho-mqtt'\nimport { EventEmitter } from 'tiny-events'\n\nimport { logger as Logger } from '../log'\nimport { ISocket, IDriver } from './index'\nimport msgpack from 'msgpack-lite'\nimport {\n\tILogger,\n\tISocketOptions,\n\tICallback,\n\tISubscription,\n\tICredentials\n} from '../../interfaces'\n\nexport class MQTTDriver extends EventEmitter implements ISocket, IDriver {\n  logger: ILogger\n  config: ISocketOptions\n  socket: any\n  constructor ({ host = 'localhost', path = '/', integrationId, config, logger = Logger, ...moreConfigs }: any) {\n    super()\n    host = 'localhost'\n    const [, _host = host, , port = 8081] = new RegExp('(.*?)(:([0-9]+))?$').exec(host || 'localhost:3000') || []\n    this.config = {\n      ...config,\n      ...moreConfigs,\n      host: _host.replace(/^http/, 'ws'),\n      timeout: 20000,\n      port: port\n\t\t\t// reopen: number\n\t\t\t// ping: number\n\t\t\t// close: number\n\t\t\t// integration: string\n    }\n\n    this.logger = logger\n\n    if (/https/.test(host)) {\n      this.socket = new Client(this.config.host + path, 'clientId')\n    } else {\n      this.socket = new Client((this.config.host || '').replace('http://', '').replace('ws://', ''), Number(port), path, 'clientId')\n    }\n    this.socket.onMessageArrived = ({ destinationName, payloadBytes }: any) => {\n      if (/room-message/.test(destinationName)) {\n        this.emit('message', { topic: destinationName, message: msgpack.decode(payloadBytes) })\n      }\n    }\n  }\n\n  connect (options: ISocketOptions): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.socket.connect({ userName: 'livechat-guest', password: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2Ijp7InZpc2l0b3JUb2tlbiI6ImFqamVvY2N5dXhweXVlOTg3YzJ0NnMifSwidXNlciI6eyJ2Ijp7InZpc2l0b3JUb2tlbiI6ImFqamVvY2N5dXhweXVlOTg3YzJ0NnMifX0sIm5hbWUiOiJKb2huIERvZSIsImlhdCI6MTUxNjIzOTAyMn0.RTQz72NTgI6qWgQMCNHHaSNS13sDK3cz--ss2_5vAz8'\t, onSuccess: resolve, onFailure: reject, useSSL: /https/.test(this.config.host || '') })\n    })\n  }\n  disconnect (): Promise<any> {\n    this.socket.end()\n    return Promise.resolve(this.socket)\n  }\n\n  subscribe (topic: string, { qos = 0 }: any): Promise<ISubscription> {\n    return new Promise((resolve, reject) => {\n      this.socket.subscribe(topic, { qos, onFailure: (...args: any[]) => {\n        console.log(...args)\n        reject(args)\n      }, onSuccess: (...args: any[]) => {\n        console.log(...args)\n        resolve(args as any)\n\t\t\t }\n      })\n    })\n  }\n\n  unsubscribe (subscription: ISubscription, ...args: any[]): Promise < ISocket > {\n    return new Promise((resolve, reject) => {\n      this.socket.unsubscribe(subscription.name, [...args, (err: any, granted: any) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(granted)\n      }])\n    })\n  }\n\n  unsubscribeAll (): Promise < ISocket > {\n    return Promise.resolve() as any\n  }\n  subscribeNotifyAll (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  subscribeLoggedNotify (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  subscribeNotifyUser (): Promise < any > {\n    return Promise.resolve() as any\n  }\n\n  login (credentials: ICredentials, args ?: any): Promise < any > {\n    return Promise.resolve() as any\n  }\n\t// usertyping room-messages deleted messages\n  subscribeRoom (rid: string, ...args: any[]): Promise < ISubscription[] > {\n    return this.subscribe(`room-messages/${rid}`, { qos: 0 }) as any\n  }\n\n  onMessage (cb: ICallback): void {\n    this.on('message', ({ topic, message }: any) => {\n      if (/room-messages/.test(topic)) {\n        cb(message)// TODO apply msgpack\n      }\n    })\n  }\n  async onTyping (cb: ICallback): Promise < any > {\n    return new Promise((resolve) => {\n      resolve(this.on('notify-room', ({ fields: { args: [username, isTyping] } }: any) => {\n        cb(username, isTyping)\n      }))\n\n    })\n  }\n\n  notifyVisitorTyping (rid: string, username: string, typing: boolean, token: string): Promise<any> {\n    return Promise.resolve() as any\n  }\n\n  onStreamData (name: string, cb: ICallback): Promise<any> {\n    return Promise.resolve(this.on(name, ({ fields: { args: [message] } }: any) => cb((message)))) as any\n  }\n\n  methodCall = (method: string, ...args: any[]): Promise<any> => {\n    return Promise.resolve() as any\n  }\n}\n"]}