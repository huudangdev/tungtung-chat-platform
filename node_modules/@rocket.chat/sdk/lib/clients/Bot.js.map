{"version":3,"file":"Bot.js","sourceRoot":"","sources":["../../../src/lib/clients/Bot.ts"],"names":[],"mappings":"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","sourcesContent":["import { logger } from '../log'\nimport Rocketchat from './Rocketchat'\nimport mem from 'mem'\nimport {\n\tISocketOptions,\n\tIRespondOptions,\n\tICallback,\n\tIMessageCallback,\n\tISubscriptionEvent,\n\tIMessage,\n\tISubscription,\n\tIMessageReceipt\n} from '../../interfaces'\nimport { RID } from '../api/RocketChat'\n\nconst MY_MESSAGES = '__my_messages__'\nconst TOPIC_MESSAGES = 'stream-room-messages'\n\nexport default class BotClient extends Rocketchat {\n  integrationId: string\n  lastReadTime: Date = new Date(-8640000000000000)\n  joinedIds: string[] = []\n  messages: ISubscription | null = null\n\n  constructor ({ allPublic = false, integrationId, cachedMethods = ['channelInfo','privateInfo','getRoomIdByNameOrId', 'getRoomId', 'getRoomName','getRoomNameById','getDirectMessageRoomId' ], ...config }: any) {\n    super({ ...config, allPublic })\n    this.integrationId = integrationId\n\n    cachedMethods.forEach((name: string) => {\n      if ((this as any)[name]) {\n        (this as any)[name] = mem((this as any)[name].bind(this), { maxAge: 60 * 60 * 1000 }).bind(this)\n      }\n    })\n  }\n\t/**\n\t * Initialise socket instance with given options or defaults.\n\t * Proxies the DDP module socket connection. Resolves with socket when open.\n\t * Accepts callback following error-first-pattern.\n\t * Error returned or promise rejected on timeout.\n\t * @example <caption>Use with callback</caption>\n\t *  import driver from '@rocket.chat/sdk/bot'\n\t *  driver.connect({}, (err) => {\n\t *    if (err) throw err\n\t *    else console.log('connected')\n\t *  })\n\t * @example <caption>Using promise</caption>\n\t *  import driver from '@rocket.chat/sdk/bot'\n\t *  driver.connect()\n\t *    .then(() => console.log('connected'))\n\t *    .catch((err) => console.error(err))\n\t */\n  async connect (options: ISocketOptions, callback?: ICallback): Promise<any> {\n    try {\n      const result = await super.connect(options)\n      if (callback) {\n        callback(null, (await this.socket))\n      }\n      return result\n\n    } catch (error) {\n      if (callback) {\n        callback(error, this)\n      }\n      return Promise.reject(error)\n    }\n  }\n  async unsubscribeAll () {\n    delete this.messages\n    return super.unsubscribeAll()\n  }\n/** Begin subscription to user's \"global\" message stream. Will only allow one. */\n  async subscribeToMessages () {\n    if (!this.messages) {\n      this.messages = await this.subscribe(TOPIC_MESSAGES, MY_MESSAGES)\n    }\n    return this.messages\n  }\n/**\n * Add callback for changes in the message stream, subscribing if not already.\n * This can be called directly for custom extensions, but for most usage (e.g.\n * for bots) the respondToMessages is more useful to only receive messages\n * matching configuration.\n *\n * @param callback Function called with every change in subscriptions.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed message\n *  - Third argument is additional attributes, such as `roomType`\n */\n  async reactToMessages (callback: IMessageCallback, debug?: string) {\n    const handler = (e: ISubscriptionEvent) => {\n\n      try {\n        const message: IMessage = e.fields.args[0]\n\n        if (!message || !message._id) {\n          callback(new Error('Message handler fired on event without message or meta data'))\n        } else {\n\n          callback(null, message, {} as any)\n        }\n      } catch (err) {\n        this.logger.error(`[driver] Message handler err: ${err.message}`)\n        callback(err)\n      }\n    }\n    this.messages = await this.subscribeToMessages()\n    this.messages.onEvent(handler)\n    // this.logger.info(`[driver] Added event handler for ${this.messages.name} subscription`)\n  }\n/**\n * Applies `reactToMessages` with some filtering of messages based on config.\n * If no rooms are joined at this point, it will attempt to join now based on\n * environment config, otherwise it might not receive any messages. It doesn't\n * matter that this happens asynchronously because joined rooms can change after\n * the subscription is set up.\n *\n * @param callback Function called after filters run on subscription events.\n *  - Uses error-first callback pattern\n *  - Second argument is the changed item\n *  - Third argument is additional attributes, such as `roomType`\n * @param options Sets filters for different event/message types.\n */\n  async respondToMessages (callback: IMessageCallback, options: IRespondOptions = {}) {\n    const config = { ...this.config, ...options }\n\n\t\t// Join configured rooms if they haven't been already, unless listening to all\n\t\t// public rooms, in which case it doesn't matter\n    if (!config.allPublic && this.joinedIds.length === 0 && config.rooms && config.rooms.length > 0) {\n      try {\n        await this.joinRooms(config.rooms)\n      } catch (err) {\n        this.logger.error(`[driver] Failed to join configured rooms (${config.rooms.join(', ')}): ${err.message}`)\n      }\n    }\n    return this.reactToMessages(async (err, message, meta) => {\n      if (err) {\n        logger.error(`[driver] Unable to receive: ${err.message}`)\n        return callback(err) // bubble errors back to adapter\n      }\n      if (typeof message === 'undefined' /*|| typeof meta === 'undefined'*/) {\n        logger.error(`[driver] Message or meta undefined`)\n        return callback(err)\n      }\n\n\t\t\t// Ignore bot's own messages\n      if (message.u && message.u._id === this.userId) return\n\n\t\t\t// Ignore DMs unless configured not to\n      try {\n\n        const room = await this.rooms.info({ rid: message.rid })\n\n        const isDM = room.t === 'd'\n        if (isDM && !config.dm) return\n\n\t\t\t\t// Ignore Livechat unless configured not to\n        const isLC = room.t === 'l'\n\n        if (isLC && !config.livechat) return\n      } catch (error) {\n        console.log(error)\n      }\n\n\t\t\t// Ignore messages in un-joined public rooms unless configured not to\n      // if (!config.allPublic && !isDM && !meta.roomParticipant) return\n\n\t\t\t// Set current time for comparison to incoming\n      let currentReadTime = (message.ts) ? new Date(message.ts.$date) : new Date()\n\n\t\t\t// Ignore edited messages if configured to\n      if (!config.edited && message.editedAt) return\n\n\t\t\t// Ignore messages in stream that aren't new\n\n      if (currentReadTime < this.lastReadTime) return\n\t\t\t// At this point, message has passed checks and can be responded to\n      // const username = (message.u) ? message.u.username : 'unknown'\n      // this.logger.info(`[driver] Message ${message._id} from ${username}`)\n      this.lastReadTime = currentReadTime\n\n      callback(null, message, meta)\n    })\n  }\n\n\t/** Get ID for a room by name (or ID). */\n  getRoomId (name: string): Promise < RID > {\n    return this.getRoomIdByNameOrId(name)\n  }\n\n\t/** Join the bot into a room by its name or ID */\n  async joinRoom ({ rid }: any): Promise < RID > {\n    const roomId = await this.getRoomId(rid)\n    const joinedIndex = this.joinedIds.indexOf(rid)\n    if (joinedIndex !== -1) {\n      logger.error(`[driver] Join room failed, already joined`)\n      throw new Error(`[driver] Join room failed, already joined`)\n    }\n    await super.joinRoom({ rid: roomId })\n    this.joinedIds.push(roomId)\n    return roomId\n  }\n\n\t/** Exit a room the bot has joined */\n  async leaveRoom (room: string): Promise < RID > {\n    let roomId = await this.getRoomId(room)\n    let joinedIndex = this.joinedIds.indexOf(room)\n    if (joinedIndex === -1) {\n      this.logger.error(`[driver] Leave room failed, bot has not joined ${room}`)\n      throw new Error(`[driver] Leave room failed, bot has not joined ${room}`)\n    }\n    await this.leaveRoom(roomId)\n    delete this.joinedIds[joinedIndex]\n    return roomId\n  }\n\n\t/** Join a set of rooms by array of names or IDs */\n  joinRooms (rooms: string[]): Promise < RID[] > {\n    return Promise.all(rooms.map((rid) => this.joinRoom({ rid })))\n  }\n\t/**\n\t * Prepare and send string/s to specified room ID.\n\t * @param content Accepts message text string or array of strings.\n\t * @param roomId  ID of the target room to use in send.\n\t * @todo Returning one or many gets complicated with type checking not allowing\n\t *       use of a property because result may be array, when you know it's not.\n\t *       Solution would probably be to always return an array, even for single\n\t *       send. This would be a breaking change, should hold until major version.\n\t */\n  sendToRoomId (content: IMessage | string | string[], roomId: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    if (Array.isArray(content)) {\n      return Promise.all(content.map((text) => {\n        return this.sendMessage(text, roomId)\n      }))\n    }\n    return this.sendMessage(content, roomId)\n  }\n\t/**\n\t * Prepare and send string/s to specified room name (or ID).\n\t * @param content Accepts message text string or array of strings.\n\t * @param room    A name (or ID) to resolve as ID to use in send.\n\t */\n  sendToRoom (content: IMessage | string | string[], room: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    return this.getRoomId(room)\n\t\t.then((roomId) => this.sendToRoomId(content, roomId))\n  }\n\n\t/**\n\t * Prepare and send string/s to a user in a DM.\n\t * @param content   Accepts message text string or array of strings.\n\t * @param username  Name to create (or get) DM for room ID to use in send.\n\t */\n  sendDirectToUser (content: IMessage | string | string[], username: string): Promise<IMessageReceipt[] | IMessageReceipt > {\n    return this.getDirectMessageRoomId(username)\n\t\t.then((rid) => this.sendToRoomId(content, rid))\n  }\n\t/**\n\t * Get ID for a DM room by its recipient's name.\n\t * Will create a DM (with the bot) if it doesn't exist already.\n\t * @todo test why create resolves with object instead of simply ID\n\t */\n  getDirectMessageRoomId (username: string): Promise < RID > {\n    return this.createDirectMessage(username).then((DM: any) => {\n      return DM._id\n    })\n  }\n}\n"]}