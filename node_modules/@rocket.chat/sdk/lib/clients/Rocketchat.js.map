{"version":3,"file":"Rocketchat.js","sourceRoot":"","sources":["../../../src/lib/clients/Rocketchat.ts"],"names":[],"mappings":"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","sourcesContent":["import { ISocket, IDriver, Protocols } from '../drivers'\nimport ClientRest from '../api/RocketChat'\nimport { ILogger, ISocketOptions, ICallback, ISubscription, ICredentials } from '../../interfaces'\nimport { logger as Logger } from '../log'\nexport default class RocketChatClient extends ClientRest implements ISocket {\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver>\n  config: any\n\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ ...config, logger })\n    this.logger = logger\n    switch (protocol) {\n      // case Protocols.MQTT:\n      //   this.socket = import(/* webpackChunkName: 'mqtt' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ ...config, logger }))\n      //   break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddp' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ ...config, logger }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n\n  async resume ({ token }: { token: string }) {\n    return (await this.socket as IDriver).login({ token } as any, {})\n  }\n\n  async login (credentials: ICredentials) {\n    await super.login(credentials)\n    return this.currentLogin && this.resume({ token: this.currentLogin.authToken })\n  }\n\n  async connect (options: ISocketOptions): Promise<any> { return (await this.socket as ISocket).connect(options) }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async onStreamData (event: string, cb: ICallback): Promise<any> { return (await this.socket as ISocket).onStreamData(event, cb) }\n  async subscribe (topic: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as ISocket).subscribe(topic, ...args) }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeRoom (rid: string, ...args: any[]): Promise<ISubscription[]> { return (await this.socket as IDriver).subscribeRoom(rid, ...args) }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver).subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver).subscribeNotifyUser() }\n  get url () {\n    return this.socket.then((socket) => (socket as IDriver).config.host)\n  }\n  async onMessage (cb: ICallback): Promise<any> {\n    return (await this.socket as IDriver).onMessage(cb)\n  }\n  async methodCall (method: string, ...args: any[]): Promise<ISubscription> { return (await this.socket as IDriver).methodCall(method, ...args) }\n\n}\n"]}