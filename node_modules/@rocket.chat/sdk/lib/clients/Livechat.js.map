{"version":3,"file":"Livechat.js","sourceRoot":"","sources":["../../../src/lib/clients/Livechat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\t* @module LivechatDriver\n\t* Provides high-level helpers for Livechat connection, method calls, subscriptions.\n\t*/\nimport LivechatRest from '../api/Livechat'\nimport { ISocket, Protocols, IDriver } from '../drivers'\nimport { logger as Logger } from '../log'\nimport {\n\tILogger,\n\tISocketOptions,\n\tICallback,\n\tISubscription\n} from '../../interfaces'\n\nexport default class LivechatClient extends LivechatRest implements ISocket {\n  livechatStream: string = 'stream-livechat-room'\n  userId: string = ''\n  logger: ILogger = Logger\n  socket: Promise<ISocket | IDriver> = Promise.resolve() as any\n  constructor ({ logger, allPublic, rooms, integrationId, protocol = Protocols.DDP, ...config }: any) {\n    super({ logger, ...config })\n    this.import(protocol, config)\n  }\n  import (protocol: Protocols, config: any) {\n    switch (protocol) {\n      // case Protocols.MQTT:\n      //   this.socket = import(/* webpackChunkName: 'mqtttest' */ '../drivers/mqtt').then(({ MQTTDriver }) => new MQTTDriver({ logger: this.logger, ...config }))\n      //   break\n      case Protocols.DDP:\n        this.socket = import(/* webpackChunkName: 'ddptest' */ '../drivers/ddp').then(({ DDPDriver }) => new DDPDriver({ logger: this.logger, ...config }))\n        break\n      default:\n        throw new Error(`Invalid Protocol: ${protocol}, valids: ${Object.keys(Protocols).join()}`)\n    }\n  }\n  async connect (options: ISocketOptions, callback?: ICallback): Promise <any> {\n    return (await this.socket as ISocket).connect(options).then(() => (this.setUpConnection()))\n  }\n  async disconnect (): Promise<any> { return (await this.socket as ISocket).disconnect() }\n  async unsubscribe (subscription: ISubscription): Promise<any> { return (await this.socket as ISocket).unsubscribe(subscription) }\n  async unsubscribeAll (): Promise<any> { return (await this.socket as ISocket).unsubscribeAll() }\n  async subscribeNotifyAll (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyAll() }\n  async subscribeLoggedNotify (): Promise<any> { return (await this.socket as IDriver) .subscribeLoggedNotify() }\n  async subscribeNotifyUser (): Promise<any> { return (await this.socket as IDriver) .subscribeNotifyUser() }\n  async onMessage (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onMessage(cb) }\n  async onTyping (cb: ICallback): Promise<any> { return (await this.socket as IDriver).onTyping(cb) }\n  async onAgentChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, data }] } }: any) => {\n      if (type === 'agentData') {\n        cb(data)\n      }\n    })\n  }\n  async onAgentStatusChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, status }] } }: any) => {\n      if (type === 'agentStatus') {\n        cb(status)\n      }\n    })\n  }\n\n  async onQueuePositionChange (rid: string, cb: ICallback) {\n    await this.subscribe(this.livechatStream, rid)\n    await this.onStreamData(this.livechatStream, ({ fields: { args: [{ type, data }] } }: any) => {\n      if (type === 'queueData') {\n        cb(data)\n      }\n    })\n  }\n\n  async notifyVisitorTyping (rid: string, username: string, typing: boolean) {\n    return (await this.socket as IDriver).notifyVisitorTyping(rid, username, typing, this.credentials.token)\n  }\n\n  async subscribe (topic: string, eventName: string) {\n    const { token } = this.credentials\n    return (await this.socket as ISocket).subscribe(topic, eventName, { token, visitorToken: token })\n  }\n\n  async subscribeRoom (rid: string) {\n    const { token } = this.credentials\n    return (await this.socket as IDriver).subscribeRoom(rid, { token, visitorToken: token })\n  }\n\n  async onStreamData (event: string, cb: ICallback): Promise<any> {\n    return (await this.socket as ISocket).onStreamData(event, cb)\n  }\n\n  async setUpConnection () {\n    const { token } = this.credentials\n    return (await this.socket as IDriver).methodCall('livechat:setUpConnection', { token })\n  }\n}\n"]}