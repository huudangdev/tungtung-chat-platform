{"version":3,"file":"RocketChat.js","sourceRoot":"","sources":["../../../src/lib/api/RocketChat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n\t* @module ApiRocketChat\n\t* Provides a client for handling requests with Rocket.Chat's REST API\n\t*/\n\nexport type RID = string\nimport {\n\tIUserAPI,\n\tIMessage,\n\tIChannelAPI,\n\tIGroupAPI,\n\tIMessageReceipt\n} from '../../interfaces'\n\nimport ApiBase from './api'\n\n/** Defaults for user queries */\nexport const userFields = { name: 1, username: 1, status: 1, type: 1 }\n\n/** Query helpers for user collection requests */\nexport default class ApiRocketChat extends ApiBase {\n\n  get users (): any {\n    const self = this\n    return {\n      all (fields: any = userFields) { return self.get('users.list', { fields }).then((r: any) => r.users) },\n      allNames () { return self.get('users.list', { fields: { 'username': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      allIDs () { return self.get('users.list', { fields: { '_id': 1 } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) },\n      online (fields: any = userFields) { return self.get('users.list', { fields, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users) },\n      onlineNames () { return self.get('users.list', { fields: { 'username': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u.username)) },\n      onlineIds () { return self.get('users.list', { fields: { '_id': 1 }, query: { 'status': { $ne: 'offline' } } }).then((r: any) => r.users.map((u: IUserAPI) => u._id)) },\n      async info (username: string): Promise<IUserAPI> { return (await self.get('users.info', { username }, true)).user }\n    }\n  }\n\n  get rooms (): any {\n    const self = this\n    return {\n      info ({ rid }: any) { return self.get('rooms.info', { rid }, true) }\n    }\n  }\n\n\t// editMessage(message: IMessage) chat.update\n  joinRoom ({ rid }: any) { return this.post('channels.join', { roomId: rid }, true) }\n\n  async info () { return (await this.get('info', {}, true)).info }\n\t/**\n\t * Send a prepared message object (with pre-defined room ID).\n\t * Usually prepared and called by sendMessageByRoomId or sendMessageByRoom.\n\t */\n  async sendMessage (message: IMessage | string, rid: string): Promise<IMessageReceipt> { return (await this.post('chat.sendMessage', { message: this.prepareMessage(message, rid) }, true)).message }\n  getRoomIdByNameOrId (name: string): Promise<RID> { return this.get('chat.getRoomIdByNameOrId', { name }, true) }\n  getRoomNameById (rid: RID): Promise<string> { return this.getRoomName(rid) }\n  async getRoomName (rid: string): Promise<string> {\n    const room = await this.get('chat.getRoomNameById', { rid }, true)\n    return room.name\n  }\n  getRoomId (name: string) { return this.get('chat.find', { name }, true) }\n  async createDirectMessage (username: string) { return (await this.post('im.create', { username }, true)).room }\n\n/**\n * Edit an existing message, replacing any attributes with those provided.\n * The given message object should have the ID of an existing message.\n */\n  editMessage (message: IMessage): Promise<IMessageReceipt> {\n    return this.post('chat.update', { roomId: message.rid, msgId: message._id, text: message.msg })\n  }\n\t/**\n\t * Send a reaction to an existing message. Simple proxy for method call.\n\t * @param emoji     Accepts string like `:thumbsup:` to add üëç reaction\n\t * @param messageId ID for a previously sent message\n\t */\n  setReaction (emoji: string, messageId: string) { return this.post('chat.react', { emoji, messageId }, true) }\n\n\t// TODO fix this methods\n\n  async loadHistory (rid: string, lastUpdate: Date): Promise<{\n    updated: IMessage[],\n    deleted: IMessage[]\n  }> {\n    return (await this.get('chat.syncMessages', { roomId: rid, lastUpdate: lastUpdate.toISOString() }, true)).result\n  }\n\t/** Exit a room the bot has joined */\n  leaveRoom (rid: string): Promise<RID> {\n    return this.post('rooms.leave', { rid }).then(() => rid)\n  }\n\n\t/** Get information about a public group */\n  async channelInfo (query: { roomName?: string, roomId?: string }) {\n    return (await this.get('channels.info', query, true)).channel as Promise<IChannelAPI>\n  }\n\n\t/** Get information about a private group */\n  async privateInfo (query: { roomName?: string, roomId?: string }) {\n    return (await this.get('groups.info', query, true)).group as Promise<IGroupAPI>\n  }\n}\n"]}